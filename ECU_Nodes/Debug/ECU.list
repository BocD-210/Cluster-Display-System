
ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004324  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004430  08004430  00014430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004470  08004470  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08004470  08004470  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004470  08004470  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004470  08004470  00014470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004474  08004474  00014474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000014  0800448c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  0800448c  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c23c  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c50  00000000  00000000  0002c279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  0002ded0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  0002ead8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176a2  00000000  00000000  0002f668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c6ac  00000000  00000000  00046d0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bcbf  00000000  00000000  000533b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000df075  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000320c  00000000  00000000  000df0c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08004418 	.word	0x08004418

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08004418 	.word	0x08004418

0800014c <millis>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t millis(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8000150:	f000 fffc 	bl	800114c <HAL_GetTick>
 8000154:	4603      	mov	r3, r0
}
 8000156:	4618      	mov	r0, r3
 8000158:	bd80      	pop	{r7, pc}
	...

0800015c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	4a24      	ldr	r2, [pc, #144]	; (80001fc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800016a:	4293      	cmp	r3, r2
 800016c:	d141      	bne.n	80001f2 <HAL_TIM_PeriodElapsedCallback+0x96>
    {
        if (led_state == 1)
 800016e:	4b24      	ldr	r3, [pc, #144]	; (8000200 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000170:	781b      	ldrb	r3, [r3, #0]
 8000172:	2b01      	cmp	r3, #1
 8000174:	d11d      	bne.n	80001b2 <HAL_TIM_PeriodElapsedCallback+0x56>
        {
            //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
            led_status_left = !led_status_left;
 8000176:	4b23      	ldr	r3, [pc, #140]	; (8000204 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000178:	781b      	ldrb	r3, [r3, #0]
 800017a:	2b00      	cmp	r3, #0
 800017c:	bf0c      	ite	eq
 800017e:	2301      	moveq	r3, #1
 8000180:	2300      	movne	r3, #0
 8000182:	b2db      	uxtb	r3, r3
 8000184:	461a      	mov	r2, r3
 8000186:	4b1f      	ldr	r3, [pc, #124]	; (8000204 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000188:	701a      	strb	r2, [r3, #0]
            flag_button1 = 1;
 800018a:	4b1f      	ldr	r3, [pc, #124]	; (8000208 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800018c:	2201      	movs	r2, #1
 800018e:	701a      	strb	r2, [r3, #0]
            if(led_status_left)
 8000190:	4b1c      	ldr	r3, [pc, #112]	; (8000204 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	2b00      	cmp	r3, #0
 8000196:	d006      	beq.n	80001a6 <HAL_TIM_PeriodElapsedCallback+0x4a>
            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000198:	2201      	movs	r2, #1
 800019a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800019e:	481b      	ldr	r0, [pc, #108]	; (800020c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80001a0:	f002 fc05 	bl	80029ae <HAL_GPIO_WritePin>
 80001a4:	e005      	b.n	80001b2 <HAL_TIM_PeriodElapsedCallback+0x56>
            else
            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80001a6:	2200      	movs	r2, #0
 80001a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001ac:	4817      	ldr	r0, [pc, #92]	; (800020c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80001ae:	f002 fbfe 	bl	80029ae <HAL_GPIO_WritePin>
        }

        if (led_state3 == 1)
 80001b2:	4b17      	ldr	r3, [pc, #92]	; (8000210 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	2b01      	cmp	r3, #1
 80001b8:	d11b      	bne.n	80001f2 <HAL_TIM_PeriodElapsedCallback+0x96>
		{
			led_status_right = !led_status_right;
 80001ba:	4b16      	ldr	r3, [pc, #88]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80001bc:	781b      	ldrb	r3, [r3, #0]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	bf0c      	ite	eq
 80001c2:	2301      	moveq	r3, #1
 80001c4:	2300      	movne	r3, #0
 80001c6:	b2db      	uxtb	r3, r3
 80001c8:	461a      	mov	r2, r3
 80001ca:	4b12      	ldr	r3, [pc, #72]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80001cc:	701a      	strb	r2, [r3, #0]
			flag_button3 = 1;
 80001ce:	4b12      	ldr	r3, [pc, #72]	; (8000218 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80001d0:	2201      	movs	r2, #1
 80001d2:	701a      	strb	r2, [r3, #0]
			if(led_status_right)
 80001d4:	4b0f      	ldr	r3, [pc, #60]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80001d6:	781b      	ldrb	r3, [r3, #0]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d005      	beq.n	80001e8 <HAL_TIM_PeriodElapsedCallback+0x8c>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80001dc:	2201      	movs	r2, #1
 80001de:	2180      	movs	r1, #128	; 0x80
 80001e0:	480a      	ldr	r0, [pc, #40]	; (800020c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80001e2:	f002 fbe4 	bl	80029ae <HAL_GPIO_WritePin>
			else
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
		}
    }
}
 80001e6:	e004      	b.n	80001f2 <HAL_TIM_PeriodElapsedCallback+0x96>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80001e8:	2200      	movs	r2, #0
 80001ea:	2180      	movs	r1, #128	; 0x80
 80001ec:	4807      	ldr	r0, [pc, #28]	; (800020c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80001ee:	f002 fbde 	bl	80029ae <HAL_GPIO_WritePin>
}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40000800 	.word	0x40000800
 8000200:	20000038 	.word	0x20000038
 8000204:	2000006c 	.word	0x2000006c
 8000208:	2000003b 	.word	0x2000003b
 800020c:	40010c00 	.word	0x40010c00
 8000210:	20000039 	.word	0x20000039
 8000214:	2000006d 	.word	0x2000006d
 8000218:	2000003d 	.word	0x2000003d

0800021c <HAL_GPIO_EXTI_Callback>:

//ENCODER + TIMER + SWITCH INTERRUPT

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b086      	sub	sp, #24
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	80fb      	strh	r3, [r7, #6]
	uint32_t now = millis();
 8000226:	f7ff ff91 	bl	800014c <millis>
 800022a:	60f8      	str	r0, [r7, #12]

    if (GPIO_Pin == GPIO_PIN_1) // PA1 = CLK
 800022c:	88fb      	ldrh	r3, [r7, #6]
 800022e:	2b02      	cmp	r3, #2
 8000230:	f040 8081 	bne.w	8000336 <HAL_GPIO_EXTI_Callback+0x11a>
    {
    	if ((now - last_encoder_time) < debounce_delay) return;
 8000234:	4b8b      	ldr	r3, [pc, #556]	; (8000464 <HAL_GPIO_EXTI_Callback+0x248>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	68fa      	ldr	r2, [r7, #12]
 800023a:	1ad3      	subs	r3, r2, r3
 800023c:	220a      	movs	r2, #10
 800023e:	4293      	cmp	r3, r2
 8000240:	f0c0 8189 	bcc.w	8000556 <HAL_GPIO_EXTI_Callback+0x33a>
			last_encoder_time = now;
 8000244:	4a87      	ldr	r2, [pc, #540]	; (8000464 <HAL_GPIO_EXTI_Callback+0x248>)
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	6013      	str	r3, [r2, #0]

        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET) {
 800024a:	2104      	movs	r1, #4
 800024c:	4886      	ldr	r0, [pc, #536]	; (8000468 <HAL_GPIO_EXTI_Callback+0x24c>)
 800024e:	f002 fb97 	bl	8002980 <HAL_GPIO_ReadPin>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d10f      	bne.n	8000278 <HAL_GPIO_EXTI_Callback+0x5c>
            // Quay nguoc
            if (brightness > BRIGHTNESS_MIN)
 8000258:	4b84      	ldr	r3, [pc, #528]	; (800046c <HAL_GPIO_EXTI_Callback+0x250>)
 800025a:	881b      	ldrh	r3, [r3, #0]
 800025c:	b21b      	sxth	r3, r3
 800025e:	2200      	movs	r2, #0
 8000260:	4293      	cmp	r3, r2
 8000262:	dd18      	ble.n	8000296 <HAL_GPIO_EXTI_Callback+0x7a>
                brightness--;
 8000264:	4b81      	ldr	r3, [pc, #516]	; (800046c <HAL_GPIO_EXTI_Callback+0x250>)
 8000266:	881b      	ldrh	r3, [r3, #0]
 8000268:	b21b      	sxth	r3, r3
 800026a:	b29b      	uxth	r3, r3
 800026c:	3b01      	subs	r3, #1
 800026e:	b29b      	uxth	r3, r3
 8000270:	b21a      	sxth	r2, r3
 8000272:	4b7e      	ldr	r3, [pc, #504]	; (800046c <HAL_GPIO_EXTI_Callback+0x250>)
 8000274:	801a      	strh	r2, [r3, #0]
 8000276:	e00e      	b.n	8000296 <HAL_GPIO_EXTI_Callback+0x7a>
        } else {
            // Quay thuan
            if (brightness < BRIGHTNESS_MAX)
 8000278:	4b7c      	ldr	r3, [pc, #496]	; (800046c <HAL_GPIO_EXTI_Callback+0x250>)
 800027a:	881b      	ldrh	r3, [r3, #0]
 800027c:	b21b      	sxth	r3, r3
 800027e:	2264      	movs	r2, #100	; 0x64
 8000280:	4293      	cmp	r3, r2
 8000282:	da08      	bge.n	8000296 <HAL_GPIO_EXTI_Callback+0x7a>
                brightness++;
 8000284:	4b79      	ldr	r3, [pc, #484]	; (800046c <HAL_GPIO_EXTI_Callback+0x250>)
 8000286:	881b      	ldrh	r3, [r3, #0]
 8000288:	b21b      	sxth	r3, r3
 800028a:	b29b      	uxth	r3, r3
 800028c:	3301      	adds	r3, #1
 800028e:	b29b      	uxth	r3, r3
 8000290:	b21a      	sxth	r2, r3
 8000292:	4b76      	ldr	r3, [pc, #472]	; (800046c <HAL_GPIO_EXTI_Callback+0x250>)
 8000294:	801a      	strh	r2, [r3, #0]
        }

       //Capnhap trang thai led thong qua timer2_CH1
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, brightness);
 8000296:	4b75      	ldr	r3, [pc, #468]	; (800046c <HAL_GPIO_EXTI_Callback+0x250>)
 8000298:	881b      	ldrh	r3, [r3, #0]
 800029a:	b21a      	sxth	r2, r3
 800029c:	4b74      	ldr	r3, [pc, #464]	; (8000470 <HAL_GPIO_EXTI_Callback+0x254>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	635a      	str	r2, [r3, #52]	; 0x34

        encoder_value = brightness;
 80002a2:	4b72      	ldr	r3, [pc, #456]	; (800046c <HAL_GPIO_EXTI_Callback+0x250>)
 80002a4:	881b      	ldrh	r3, [r3, #0]
 80002a6:	b21b      	sxth	r3, r3
 80002a8:	b29a      	uxth	r2, r3
 80002aa:	4b72      	ldr	r3, [pc, #456]	; (8000474 <HAL_GPIO_EXTI_Callback+0x258>)
 80002ac:	801a      	strh	r2, [r3, #0]

        // ===== Lưu giá trị vào buffer l�?c trung bình =====
	   encoder_buffer[encoder_index] = encoder_value;
 80002ae:	4b72      	ldr	r3, [pc, #456]	; (8000478 <HAL_GPIO_EXTI_Callback+0x25c>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	461a      	mov	r2, r3
 80002b4:	4b6f      	ldr	r3, [pc, #444]	; (8000474 <HAL_GPIO_EXTI_Callback+0x258>)
 80002b6:	881b      	ldrh	r3, [r3, #0]
 80002b8:	b299      	uxth	r1, r3
 80002ba:	4b70      	ldr	r3, [pc, #448]	; (800047c <HAL_GPIO_EXTI_Callback+0x260>)
 80002bc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	   encoder_index = (encoder_index + 1) % FILTER_SIZE;
 80002c0:	4b6d      	ldr	r3, [pc, #436]	; (8000478 <HAL_GPIO_EXTI_Callback+0x25c>)
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	1c5a      	adds	r2, r3, #1
 80002c6:	4b6e      	ldr	r3, [pc, #440]	; (8000480 <HAL_GPIO_EXTI_Callback+0x264>)
 80002c8:	fb83 1302 	smull	r1, r3, r3, r2
 80002cc:	1099      	asrs	r1, r3, #2
 80002ce:	17d3      	asrs	r3, r2, #31
 80002d0:	1ac9      	subs	r1, r1, r3
 80002d2:	460b      	mov	r3, r1
 80002d4:	009b      	lsls	r3, r3, #2
 80002d6:	440b      	add	r3, r1
 80002d8:	005b      	lsls	r3, r3, #1
 80002da:	1ad1      	subs	r1, r2, r3
 80002dc:	b2ca      	uxtb	r2, r1
 80002de:	4b66      	ldr	r3, [pc, #408]	; (8000478 <HAL_GPIO_EXTI_Callback+0x25c>)
 80002e0:	701a      	strb	r2, [r3, #0]

	   // Tính trung bình
	   uint32_t sum = 0;
 80002e2:	2300      	movs	r3, #0
 80002e4:	617b      	str	r3, [r7, #20]
	   for (uint8_t i = 0; i < FILTER_SIZE; i++) {
 80002e6:	2300      	movs	r3, #0
 80002e8:	74fb      	strb	r3, [r7, #19]
 80002ea:	e00a      	b.n	8000302 <HAL_GPIO_EXTI_Callback+0xe6>
		   sum += encoder_buffer[i];
 80002ec:	7cfb      	ldrb	r3, [r7, #19]
 80002ee:	4a63      	ldr	r2, [pc, #396]	; (800047c <HAL_GPIO_EXTI_Callback+0x260>)
 80002f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002f4:	461a      	mov	r2, r3
 80002f6:	697b      	ldr	r3, [r7, #20]
 80002f8:	4413      	add	r3, r2
 80002fa:	617b      	str	r3, [r7, #20]
	   for (uint8_t i = 0; i < FILTER_SIZE; i++) {
 80002fc:	7cfb      	ldrb	r3, [r7, #19]
 80002fe:	3301      	adds	r3, #1
 8000300:	74fb      	strb	r3, [r7, #19]
 8000302:	7cfb      	ldrb	r3, [r7, #19]
 8000304:	2b09      	cmp	r3, #9
 8000306:	d9f1      	bls.n	80002ec <HAL_GPIO_EXTI_Callback+0xd0>
	   }
	   filtered_value = sum / FILTER_SIZE;
 8000308:	697b      	ldr	r3, [r7, #20]
 800030a:	4a5e      	ldr	r2, [pc, #376]	; (8000484 <HAL_GPIO_EXTI_Callback+0x268>)
 800030c:	fba2 2303 	umull	r2, r3, r2, r3
 8000310:	08db      	lsrs	r3, r3, #3
 8000312:	b29a      	uxth	r2, r3
 8000314:	4b5c      	ldr	r3, [pc, #368]	; (8000488 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000316:	801a      	strh	r2, [r3, #0]

	   // Chỉ set flag khi giá trị đã l�?c thay đổi
	   if (filtered_value != prev_encoder_value) {
 8000318:	4b5b      	ldr	r3, [pc, #364]	; (8000488 <HAL_GPIO_EXTI_Callback+0x26c>)
 800031a:	881a      	ldrh	r2, [r3, #0]
 800031c:	4b5b      	ldr	r3, [pc, #364]	; (800048c <HAL_GPIO_EXTI_Callback+0x270>)
 800031e:	881b      	ldrh	r3, [r3, #0]
 8000320:	429a      	cmp	r2, r3
 8000322:	f000 811f 	beq.w	8000564 <HAL_GPIO_EXTI_Callback+0x348>
		   prev_encoder_value = filtered_value;
 8000326:	4b58      	ldr	r3, [pc, #352]	; (8000488 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000328:	881a      	ldrh	r2, [r3, #0]
 800032a:	4b58      	ldr	r3, [pc, #352]	; (800048c <HAL_GPIO_EXTI_Callback+0x270>)
 800032c:	801a      	strh	r2, [r3, #0]
		   flag_encoder = 1; // Báo cho main loop gửi CAN
 800032e:	4b58      	ldr	r3, [pc, #352]	; (8000490 <HAL_GPIO_EXTI_Callback+0x274>)
 8000330:	2201      	movs	r2, #1
 8000332:	701a      	strb	r2, [r3, #0]
 8000334:	e116      	b.n	8000564 <HAL_GPIO_EXTI_Callback+0x348>
	   }

    }
    else if (GPIO_Pin == GPIO_PIN_0) // PA0 = Switch
 8000336:	88fb      	ldrh	r3, [r7, #6]
 8000338:	2b01      	cmp	r3, #1
 800033a:	d149      	bne.n	80003d0 <HAL_GPIO_EXTI_Callback+0x1b4>
	{
    	if ((now - last_button_time) < debounce_delay) return;
 800033c:	4b55      	ldr	r3, [pc, #340]	; (8000494 <HAL_GPIO_EXTI_Callback+0x278>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	68fa      	ldr	r2, [r7, #12]
 8000342:	1ad3      	subs	r3, r2, r3
 8000344:	220a      	movs	r2, #10
 8000346:	4293      	cmp	r3, r2
 8000348:	f0c0 8107 	bcc.w	800055a <HAL_GPIO_EXTI_Callback+0x33e>
			last_button_time = now;
 800034c:	4a51      	ldr	r2, [pc, #324]	; (8000494 <HAL_GPIO_EXTI_Callback+0x278>)
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	6013      	str	r3, [r2, #0]

		uint8_t pin_state = (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) ? 1 : 0;
 8000352:	2101      	movs	r1, #1
 8000354:	4844      	ldr	r0, [pc, #272]	; (8000468 <HAL_GPIO_EXTI_Callback+0x24c>)
 8000356:	f002 fb13 	bl	8002980 <HAL_GPIO_ReadPin>
 800035a:	4603      	mov	r3, r0
 800035c:	2b01      	cmp	r3, #1
 800035e:	bf0c      	ite	eq
 8000360:	2301      	moveq	r3, #1
 8000362:	2300      	movne	r3, #0
 8000364:	b2db      	uxtb	r3, r3
 8000366:	727b      	strb	r3, [r7, #9]
		//HAL_Delay(50);
    	if (pin_state != prev_button_value) {
 8000368:	4b4b      	ldr	r3, [pc, #300]	; (8000498 <HAL_GPIO_EXTI_Callback+0x27c>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	7a7a      	ldrb	r2, [r7, #9]
 800036e:	429a      	cmp	r2, r3
 8000370:	f000 80f8 	beq.w	8000564 <HAL_GPIO_EXTI_Callback+0x348>
			prev_button_value = pin_state;
 8000374:	4a48      	ldr	r2, [pc, #288]	; (8000498 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000376:	7a7b      	ldrb	r3, [r7, #9]
 8000378:	7013      	strb	r3, [r2, #0]

			if (pin_state == 1) {
 800037a:	7a7b      	ldrb	r3, [r7, #9]
 800037c:	2b01      	cmp	r3, #1
 800037e:	d120      	bne.n	80003c2 <HAL_GPIO_EXTI_Callback+0x1a6>
				button_value1 = !button_value1;
 8000380:	4b46      	ldr	r3, [pc, #280]	; (800049c <HAL_GPIO_EXTI_Callback+0x280>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	b2db      	uxtb	r3, r3
 8000386:	2b00      	cmp	r3, #0
 8000388:	bf0c      	ite	eq
 800038a:	2301      	moveq	r3, #1
 800038c:	2300      	movne	r3, #0
 800038e:	b2db      	uxtb	r3, r3
 8000390:	461a      	mov	r2, r3
 8000392:	4b42      	ldr	r3, [pc, #264]	; (800049c <HAL_GPIO_EXTI_Callback+0x280>)
 8000394:	701a      	strb	r2, [r3, #0]
				led_state = !led_state;
 8000396:	4b42      	ldr	r3, [pc, #264]	; (80004a0 <HAL_GPIO_EXTI_Callback+0x284>)
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	2b00      	cmp	r3, #0
 800039c:	bf0c      	ite	eq
 800039e:	2301      	moveq	r3, #1
 80003a0:	2300      	movne	r3, #0
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	461a      	mov	r2, r3
 80003a6:	4b3e      	ldr	r3, [pc, #248]	; (80004a0 <HAL_GPIO_EXTI_Callback+0x284>)
 80003a8:	701a      	strb	r2, [r3, #0]
				//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, led_state ? GPIO_PIN_RESET : GPIO_PIN_SET);

				if(!led_state)
 80003aa:	4b3d      	ldr	r3, [pc, #244]	; (80004a0 <HAL_GPIO_EXTI_Callback+0x284>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	f040 80d8 	bne.w	8000564 <HAL_GPIO_EXTI_Callback+0x348>
				   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,GPIO_PIN_RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ba:	483a      	ldr	r0, [pc, #232]	; (80004a4 <HAL_GPIO_EXTI_Callback+0x288>)
 80003bc:	f002 faf7 	bl	80029ae <HAL_GPIO_WritePin>
 80003c0:	e0d0      	b.n	8000564 <HAL_GPIO_EXTI_Callback+0x348>
			}
			else{
				led_status_left = 0;
 80003c2:	4b39      	ldr	r3, [pc, #228]	; (80004a8 <HAL_GPIO_EXTI_Callback+0x28c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	701a      	strb	r2, [r3, #0]
				flag_button1 = 1;
 80003c8:	4b38      	ldr	r3, [pc, #224]	; (80004ac <HAL_GPIO_EXTI_Callback+0x290>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	701a      	strb	r2, [r3, #0]
 80003ce:	e0c9      	b.n	8000564 <HAL_GPIO_EXTI_Callback+0x348>
			}
		}
	}

    else if (GPIO_Pin == GPIO_PIN_4) // PA4 = Switch 2
 80003d0:	88fb      	ldrh	r3, [r7, #6]
 80003d2:	2b10      	cmp	r3, #16
 80003d4:	d176      	bne.n	80004c4 <HAL_GPIO_EXTI_Callback+0x2a8>
    {
        if ((now - last_button2_time) < debounce_delay) return;
 80003d6:	4b36      	ldr	r3, [pc, #216]	; (80004b0 <HAL_GPIO_EXTI_Callback+0x294>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	68fa      	ldr	r2, [r7, #12]
 80003dc:	1ad3      	subs	r3, r2, r3
 80003de:	220a      	movs	r2, #10
 80003e0:	4293      	cmp	r3, r2
 80003e2:	f0c0 80bc 	bcc.w	800055e <HAL_GPIO_EXTI_Callback+0x342>
        last_button2_time = now;
 80003e6:	4a32      	ldr	r2, [pc, #200]	; (80004b0 <HAL_GPIO_EXTI_Callback+0x294>)
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	6013      	str	r3, [r2, #0]

        static uint8_t prev_button_value2 = 0;
        static uint8_t led_state2 = 0;

        uint8_t pin_state = (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET) ? 1 : 0;
 80003ec:	2110      	movs	r1, #16
 80003ee:	481e      	ldr	r0, [pc, #120]	; (8000468 <HAL_GPIO_EXTI_Callback+0x24c>)
 80003f0:	f002 fac6 	bl	8002980 <HAL_GPIO_ReadPin>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b01      	cmp	r3, #1
 80003f8:	bf0c      	ite	eq
 80003fa:	2301      	moveq	r3, #1
 80003fc:	2300      	movne	r3, #0
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	72bb      	strb	r3, [r7, #10]
        if (pin_state != prev_button_value2) {
 8000402:	4b2c      	ldr	r3, [pc, #176]	; (80004b4 <HAL_GPIO_EXTI_Callback+0x298>)
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	7aba      	ldrb	r2, [r7, #10]
 8000408:	429a      	cmp	r2, r3
 800040a:	f000 80ab 	beq.w	8000564 <HAL_GPIO_EXTI_Callback+0x348>
            prev_button_value2 = pin_state;
 800040e:	4a29      	ldr	r2, [pc, #164]	; (80004b4 <HAL_GPIO_EXTI_Callback+0x298>)
 8000410:	7abb      	ldrb	r3, [r7, #10]
 8000412:	7013      	strb	r3, [r2, #0]

            if (pin_state == 1) {
 8000414:	7abb      	ldrb	r3, [r7, #10]
 8000416:	2b01      	cmp	r3, #1
 8000418:	d120      	bne.n	800045c <HAL_GPIO_EXTI_Callback+0x240>
                button_value2 = !button_value2;
 800041a:	4b27      	ldr	r3, [pc, #156]	; (80004b8 <HAL_GPIO_EXTI_Callback+0x29c>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	b2db      	uxtb	r3, r3
 8000420:	2b00      	cmp	r3, #0
 8000422:	bf0c      	ite	eq
 8000424:	2301      	moveq	r3, #1
 8000426:	2300      	movne	r3, #0
 8000428:	b2db      	uxtb	r3, r3
 800042a:	461a      	mov	r2, r3
 800042c:	4b22      	ldr	r3, [pc, #136]	; (80004b8 <HAL_GPIO_EXTI_Callback+0x29c>)
 800042e:	701a      	strb	r2, [r3, #0]
                led_state2 = !led_state2;
 8000430:	4b22      	ldr	r3, [pc, #136]	; (80004bc <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b00      	cmp	r3, #0
 8000436:	bf0c      	ite	eq
 8000438:	2301      	moveq	r3, #1
 800043a:	2300      	movne	r3, #0
 800043c:	b2db      	uxtb	r3, r3
 800043e:	461a      	mov	r2, r3
 8000440:	4b1e      	ldr	r3, [pc, #120]	; (80004bc <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000442:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, led_state2 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000444:	4b1d      	ldr	r3, [pc, #116]	; (80004bc <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	bf0c      	ite	eq
 800044c:	2301      	moveq	r3, #1
 800044e:	2300      	movne	r3, #0
 8000450:	b2db      	uxtb	r3, r3
 8000452:	461a      	mov	r2, r3
 8000454:	2140      	movs	r1, #64	; 0x40
 8000456:	4813      	ldr	r0, [pc, #76]	; (80004a4 <HAL_GPIO_EXTI_Callback+0x288>)
 8000458:	f002 faa9 	bl	80029ae <HAL_GPIO_WritePin>
            }

            flag_button2 = 1;
 800045c:	4b18      	ldr	r3, [pc, #96]	; (80004c0 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800045e:	2201      	movs	r2, #1
 8000460:	701a      	strb	r2, [r3, #0]
 8000462:	e07f      	b.n	8000564 <HAL_GPIO_EXTI_Callback+0x348>
 8000464:	20000044 	.word	0x20000044
 8000468:	40010800 	.word	0x40010800
 800046c:	20000000 	.word	0x20000000
 8000470:	20000114 	.word	0x20000114
 8000474:	2000003e 	.word	0x2000003e
 8000478:	20000068 	.word	0x20000068
 800047c:	20000054 	.word	0x20000054
 8000480:	66666667 	.word	0x66666667
 8000484:	cccccccd 	.word	0xcccccccd
 8000488:	2000006a 	.word	0x2000006a
 800048c:	20000004 	.word	0x20000004
 8000490:	2000003a 	.word	0x2000003a
 8000494:	20000048 	.word	0x20000048
 8000498:	20000042 	.word	0x20000042
 800049c:	20000040 	.word	0x20000040
 80004a0:	20000038 	.word	0x20000038
 80004a4:	40010c00 	.word	0x40010c00
 80004a8:	2000006c 	.word	0x2000006c
 80004ac:	2000003b 	.word	0x2000003b
 80004b0:	2000004c 	.word	0x2000004c
 80004b4:	2000006e 	.word	0x2000006e
 80004b8:	20000002 	.word	0x20000002
 80004bc:	2000006f 	.word	0x2000006f
 80004c0:	2000003c 	.word	0x2000003c
        }
    }
    else if (GPIO_Pin == GPIO_PIN_5) // PA4 = Switch 2
 80004c4:	88fb      	ldrh	r3, [r7, #6]
 80004c6:	2b20      	cmp	r3, #32
 80004c8:	d14c      	bne.n	8000564 <HAL_GPIO_EXTI_Callback+0x348>
   {
	   if ((now - last_button3_time) < debounce_delay) return;
 80004ca:	4b28      	ldr	r3, [pc, #160]	; (800056c <HAL_GPIO_EXTI_Callback+0x350>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	68fa      	ldr	r2, [r7, #12]
 80004d0:	1ad3      	subs	r3, r2, r3
 80004d2:	220a      	movs	r2, #10
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d344      	bcc.n	8000562 <HAL_GPIO_EXTI_Callback+0x346>
	   last_button3_time = now;
 80004d8:	4a24      	ldr	r2, [pc, #144]	; (800056c <HAL_GPIO_EXTI_Callback+0x350>)
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	6013      	str	r3, [r2, #0]

	   static uint8_t prev_button_value3 = 0;
	   //static uint8_t led_state3 = 0;

	   uint8_t pin_state = (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_SET) ? 1 : 0;
 80004de:	2120      	movs	r1, #32
 80004e0:	4823      	ldr	r0, [pc, #140]	; (8000570 <HAL_GPIO_EXTI_Callback+0x354>)
 80004e2:	f002 fa4d 	bl	8002980 <HAL_GPIO_ReadPin>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	bf0c      	ite	eq
 80004ec:	2301      	moveq	r3, #1
 80004ee:	2300      	movne	r3, #0
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	72fb      	strb	r3, [r7, #11]
	   //HAL_Delay(50);
	   if (pin_state != prev_button_value3) {
 80004f4:	4b1f      	ldr	r3, [pc, #124]	; (8000574 <HAL_GPIO_EXTI_Callback+0x358>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	7afa      	ldrb	r2, [r7, #11]
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d032      	beq.n	8000564 <HAL_GPIO_EXTI_Callback+0x348>
		   prev_button_value3 = pin_state;
 80004fe:	4a1d      	ldr	r2, [pc, #116]	; (8000574 <HAL_GPIO_EXTI_Callback+0x358>)
 8000500:	7afb      	ldrb	r3, [r7, #11]
 8000502:	7013      	strb	r3, [r2, #0]

		   if (pin_state == 1) {
 8000504:	7afb      	ldrb	r3, [r7, #11]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d11e      	bne.n	8000548 <HAL_GPIO_EXTI_Callback+0x32c>
			   button_value3 = !button_value3;
 800050a:	4b1b      	ldr	r3, [pc, #108]	; (8000578 <HAL_GPIO_EXTI_Callback+0x35c>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	b2db      	uxtb	r3, r3
 8000510:	2b00      	cmp	r3, #0
 8000512:	bf0c      	ite	eq
 8000514:	2301      	moveq	r3, #1
 8000516:	2300      	movne	r3, #0
 8000518:	b2db      	uxtb	r3, r3
 800051a:	461a      	mov	r2, r3
 800051c:	4b16      	ldr	r3, [pc, #88]	; (8000578 <HAL_GPIO_EXTI_Callback+0x35c>)
 800051e:	701a      	strb	r2, [r3, #0]
			   led_state3 = !led_state3;
 8000520:	4b16      	ldr	r3, [pc, #88]	; (800057c <HAL_GPIO_EXTI_Callback+0x360>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	bf0c      	ite	eq
 8000528:	2301      	moveq	r3, #1
 800052a:	2300      	movne	r3, #0
 800052c:	b2db      	uxtb	r3, r3
 800052e:	461a      	mov	r2, r3
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <HAL_GPIO_EXTI_Callback+0x360>)
 8000532:	701a      	strb	r2, [r3, #0]
			   //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, led_state3 ? GPIO_PIN_RESET : GPIO_PIN_SET);

			   if(!led_state3)
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <HAL_GPIO_EXTI_Callback+0x360>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d113      	bne.n	8000564 <HAL_GPIO_EXTI_Callback+0x348>
				   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	2180      	movs	r1, #128	; 0x80
 8000540:	480f      	ldr	r0, [pc, #60]	; (8000580 <HAL_GPIO_EXTI_Callback+0x364>)
 8000542:	f002 fa34 	bl	80029ae <HAL_GPIO_WritePin>
 8000546:	e00d      	b.n	8000564 <HAL_GPIO_EXTI_Callback+0x348>
		   }
		   else{
			led_status_right = 0;
 8000548:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <HAL_GPIO_EXTI_Callback+0x368>)
 800054a:	2200      	movs	r2, #0
 800054c:	701a      	strb	r2, [r3, #0]
			flag_button3 = 1;
 800054e:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <HAL_GPIO_EXTI_Callback+0x36c>)
 8000550:	2201      	movs	r2, #1
 8000552:	701a      	strb	r2, [r3, #0]
 8000554:	e006      	b.n	8000564 <HAL_GPIO_EXTI_Callback+0x348>
    	if ((now - last_encoder_time) < debounce_delay) return;
 8000556:	bf00      	nop
 8000558:	e004      	b.n	8000564 <HAL_GPIO_EXTI_Callback+0x348>
    	if ((now - last_button_time) < debounce_delay) return;
 800055a:	bf00      	nop
 800055c:	e002      	b.n	8000564 <HAL_GPIO_EXTI_Callback+0x348>
        if ((now - last_button2_time) < debounce_delay) return;
 800055e:	bf00      	nop
 8000560:	e000      	b.n	8000564 <HAL_GPIO_EXTI_Callback+0x348>
	   if ((now - last_button3_time) < debounce_delay) return;
 8000562:	bf00      	nop
		   }
	   }
   }
}
 8000564:	3718      	adds	r7, #24
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000050 	.word	0x20000050
 8000570:	40010800 	.word	0x40010800
 8000574:	20000070 	.word	0x20000070
 8000578:	20000041 	.word	0x20000041
 800057c:	20000039 	.word	0x20000039
 8000580:	40010c00 	.word	0x40010c00
 8000584:	2000006d 	.word	0x2000006d
 8000588:	2000003d 	.word	0x2000003d

0800058c <Read_ADC>:

uint16_t Read_ADC(void){
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
	uint32_t sum = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	607b      	str	r3, [r7, #4]
	    for (uint8_t i = 0; i < ADC_SAMPLES; i++) {
 8000596:	2300      	movs	r3, #0
 8000598:	70fb      	strb	r3, [r7, #3]
 800059a:	e033      	b.n	8000604 <Read_ADC+0x78>
	        HAL_ADC_Start(&hadc1);
 800059c:	4820      	ldr	r0, [pc, #128]	; (8000620 <Read_ADC+0x94>)
 800059e:	f000 fedb 	bl	8001358 <HAL_ADC_Start>
	        if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 80005a2:	2164      	movs	r1, #100	; 0x64
 80005a4:	481e      	ldr	r0, [pc, #120]	; (8000620 <Read_ADC+0x94>)
 80005a6:	f000 ffb1 	bl	800150c <HAL_ADC_PollForConversion>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d120      	bne.n	80005f2 <Read_ADC+0x66>
	        	adc_value = HAL_ADC_GetValue(&hadc1);
 80005b0:	481b      	ldr	r0, [pc, #108]	; (8000620 <Read_ADC+0x94>)
 80005b2:	f001 f8b1 	bl	8001718 <HAL_ADC_GetValue>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a1a      	ldr	r2, [pc, #104]	; (8000624 <Read_ADC+0x98>)
 80005ba:	6013      	str	r3, [r2, #0]

				pwm_value = (adc_value * 1000) / 4095;
 80005bc:	4b19      	ldr	r3, [pc, #100]	; (8000624 <Read_ADC+0x98>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005c4:	fb02 f203 	mul.w	r2, r2, r3
 80005c8:	4b17      	ldr	r3, [pc, #92]	; (8000628 <Read_ADC+0x9c>)
 80005ca:	fba3 1302 	umull	r1, r3, r3, r2
 80005ce:	1ad2      	subs	r2, r2, r3
 80005d0:	0852      	lsrs	r2, r2, #1
 80005d2:	4413      	add	r3, r2
 80005d4:	0adb      	lsrs	r3, r3, #11
 80005d6:	4a15      	ldr	r2, [pc, #84]	; (800062c <Read_ADC+0xa0>)
 80005d8:	6013      	str	r3, [r2, #0]

				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm_value);
 80005da:	4b15      	ldr	r3, [pc, #84]	; (8000630 <Read_ADC+0xa4>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a13      	ldr	r2, [pc, #76]	; (800062c <Read_ADC+0xa0>)
 80005e0:	6812      	ldr	r2, [r2, #0]
 80005e2:	639a      	str	r2, [r3, #56]	; 0x38

	            sum += HAL_ADC_GetValue(&hadc1);
 80005e4:	480e      	ldr	r0, [pc, #56]	; (8000620 <Read_ADC+0x94>)
 80005e6:	f001 f897 	bl	8001718 <HAL_ADC_GetValue>
 80005ea:	4602      	mov	r2, r0
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4413      	add	r3, r2
 80005f0:	607b      	str	r3, [r7, #4]
	        }
	        HAL_ADC_Stop(&hadc1);
 80005f2:	480b      	ldr	r0, [pc, #44]	; (8000620 <Read_ADC+0x94>)
 80005f4:	f000 ff5e 	bl	80014b4 <HAL_ADC_Stop>
	        HAL_Delay(2); // delay ngắn để tránh đ�?c liên tục
 80005f8:	2002      	movs	r0, #2
 80005fa:	f000 fdb1 	bl	8001160 <HAL_Delay>
	    for (uint8_t i = 0; i < ADC_SAMPLES; i++) {
 80005fe:	78fb      	ldrb	r3, [r7, #3]
 8000600:	3301      	adds	r3, #1
 8000602:	70fb      	strb	r3, [r7, #3]
 8000604:	78fb      	ldrb	r3, [r7, #3]
 8000606:	2b09      	cmp	r3, #9
 8000608:	d9c8      	bls.n	800059c <Read_ADC+0x10>
	    }
	    return (uint16_t)(sum / ADC_SAMPLES); // Trả v�? trung bình
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4a09      	ldr	r2, [pc, #36]	; (8000634 <Read_ADC+0xa8>)
 800060e:	fba2 2303 	umull	r2, r3, r2, r3
 8000612:	08db      	lsrs	r3, r3, #3
 8000614:	b29b      	uxth	r3, r3
}
 8000616:	4618      	mov	r0, r3
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	200000e4 	.word	0x200000e4
 8000624:	20000030 	.word	0x20000030
 8000628:	00100101 	.word	0x00100101
 800062c:	20000034 	.word	0x20000034
 8000630:	20000114 	.word	0x20000114
 8000634:	cccccccd 	.word	0xcccccccd

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	; 0x28
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063e:	f000 fd2d 	bl	800109c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000642:	f000 f8db 	bl	80007fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000646:	f000 fa8d 	bl	8000b64 <MX_GPIO_Init>
  MX_ADC1_Init();
 800064a:	f000 f92d 	bl	80008a8 <MX_ADC1_Init>
  MX_CAN_Init();
 800064e:	f000 f969 	bl	8000924 <MX_CAN_Init>
  MX_TIM2_Init();
 8000652:	f000 f9b9 	bl	80009c8 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000656:	f000 fa37 	bl	8000ac8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //Start PWM on TIM2 CH1
 800065a:	2100      	movs	r1, #0
 800065c:	485a      	ldr	r0, [pc, #360]	; (80007c8 <main+0x190>)
 800065e:	f003 f84f 	bl	8003700 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000662:	4b59      	ldr	r3, [pc, #356]	; (80007c8 <main+0x190>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2200      	movs	r2, #0
 8000668:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Start PWM on TIM2 CH2
 800066a:	2104      	movs	r1, #4
 800066c:	4856      	ldr	r0, [pc, #344]	; (80007c8 <main+0x190>)
 800066e:	f003 f847 	bl	8003700 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim4); // Bắt đầu Timer
 8000672:	4856      	ldr	r0, [pc, #344]	; (80007cc <main+0x194>)
 8000674:	f002 ff9a 	bl	80035ac <HAL_TIM_Base_Start_IT>


  HAL_CAN_Start(&hcan); // Start CAN
 8000678:	4855      	ldr	r0, [pc, #340]	; (80007d0 <main+0x198>)
 800067a:	f001 fbb0 	bl	8001dde <HAL_CAN_Start>
  CAN_TxHeaderTypeDef TxHeader;

  uint8_t TxData[8];
  uint32_t TxMailbox;

  TxHeader.IDE = CAN_ID_STD;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
  TxHeader.RTR = CAN_RTR_DATA;
 8000682:	2300      	movs	r3, #0
 8000684:	61bb      	str	r3, [r7, #24]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint16_t adc_now = Read_ADC();
 8000686:	f7ff ff81 	bl	800058c <Read_ADC>
 800068a:	4603      	mov	r3, r0
 800068c:	84fb      	strh	r3, [r7, #38]	; 0x26
	  if ( (adc_now > prev_adc_value + ADC_THRESHOLD) ||
 800068e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000690:	4b50      	ldr	r3, [pc, #320]	; (80007d4 <main+0x19c>)
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	3305      	adds	r3, #5
 8000696:	429a      	cmp	r2, r3
 8000698:	dc05      	bgt.n	80006a6 <main+0x6e>
		   (adc_now < prev_adc_value - ADC_THRESHOLD) ) {
 800069a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800069c:	4b4d      	ldr	r3, [pc, #308]	; (80007d4 <main+0x19c>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	3b05      	subs	r3, #5
	  if ( (adc_now > prev_adc_value + ADC_THRESHOLD) ||
 80006a2:	429a      	cmp	r2, r3
 80006a4:	da16      	bge.n	80006d4 <main+0x9c>

		  prev_adc_value = adc_now;
 80006a6:	4a4b      	ldr	r2, [pc, #300]	; (80007d4 <main+0x19c>)
 80006a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006aa:	8013      	strh	r3, [r2, #0]

		  TxHeader.StdId = 0x101;
 80006ac:	f240 1301 	movw	r3, #257	; 0x101
 80006b0:	60fb      	str	r3, [r7, #12]
		  TxHeader.DLC = 2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	61fb      	str	r3, [r7, #28]
		  TxData[0] = (adc_now >> 8) & 0xFF;
 80006b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006b8:	0a1b      	lsrs	r3, r3, #8
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	713b      	strb	r3, [r7, #4]
		  TxData[1] = adc_now & 0xFF;
 80006c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	717b      	strb	r3, [r7, #5]
		  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 80006c6:	463b      	mov	r3, r7
 80006c8:	1d3a      	adds	r2, r7, #4
 80006ca:	f107 010c 	add.w	r1, r7, #12
 80006ce:	4840      	ldr	r0, [pc, #256]	; (80007d0 <main+0x198>)
 80006d0:	f001 fbc9 	bl	8001e66 <HAL_CAN_AddTxMessage>
	  }

	  // Gửi encoder nếu có flag
	  if (flag_encoder) {
 80006d4:	4b40      	ldr	r3, [pc, #256]	; (80007d8 <main+0x1a0>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d018      	beq.n	8000710 <main+0xd8>
		  flag_encoder = 0;
 80006de:	4b3e      	ldr	r3, [pc, #248]	; (80007d8 <main+0x1a0>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
		  TxHeader.StdId = 0x100; // ID cho encoder
 80006e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e8:	60fb      	str	r3, [r7, #12]
		  TxHeader.DLC = 2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	61fb      	str	r3, [r7, #28]
		  TxData[0] = (filtered_value >> 8) & 0xFF;
 80006ee:	4b3b      	ldr	r3, [pc, #236]	; (80007dc <main+0x1a4>)
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	0a1b      	lsrs	r3, r3, #8
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	713b      	strb	r3, [r7, #4]
		  TxData[1] = filtered_value & 0xFF;
 80006fa:	4b38      	ldr	r3, [pc, #224]	; (80007dc <main+0x1a4>)
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	717b      	strb	r3, [r7, #5]
		  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000702:	463b      	mov	r3, r7
 8000704:	1d3a      	adds	r2, r7, #4
 8000706:	f107 010c 	add.w	r1, r7, #12
 800070a:	4831      	ldr	r0, [pc, #196]	; (80007d0 <main+0x198>)
 800070c:	f001 fbab 	bl	8001e66 <HAL_CAN_AddTxMessage>
	  }

	  // Gửi button nếu có flag : Xi Nhan trái
	  if (flag_button1) {
 8000710:	4b33      	ldr	r3, [pc, #204]	; (80007e0 <main+0x1a8>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d011      	beq.n	800073e <main+0x106>
		  flag_button1 = 0;
 800071a:	4b31      	ldr	r3, [pc, #196]	; (80007e0 <main+0x1a8>)
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]

		  TxHeader.StdId = 0x103; // ID cho button
 8000720:	f240 1303 	movw	r3, #259	; 0x103
 8000724:	60fb      	str	r3, [r7, #12]

		  TxHeader.DLC = 1;
 8000726:	2301      	movs	r3, #1
 8000728:	61fb      	str	r3, [r7, #28]
		  //TxData[0] = button_value1;
		  TxData[0] = led_status_left;
 800072a:	4b2e      	ldr	r3, [pc, #184]	; (80007e4 <main+0x1ac>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	713b      	strb	r3, [r7, #4]
		  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000730:	463b      	mov	r3, r7
 8000732:	1d3a      	adds	r2, r7, #4
 8000734:	f107 010c 	add.w	r1, r7, #12
 8000738:	4825      	ldr	r0, [pc, #148]	; (80007d0 <main+0x198>)
 800073a:	f001 fb94 	bl	8001e66 <HAL_CAN_AddTxMessage>
	  }

	  // Gửi button nếu có flag : �?ÈN
	  if (flag_button2) {
 800073e:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <main+0x1b0>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	b2db      	uxtb	r3, r3
 8000744:	2b00      	cmp	r3, #0
 8000746:	d012      	beq.n	800076e <main+0x136>
		  flag_button2 = 0;
 8000748:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <main+0x1b0>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]

		  TxHeader.StdId = 0x105; // ID cho button
 800074e:	f240 1305 	movw	r3, #261	; 0x105
 8000752:	60fb      	str	r3, [r7, #12]

		  TxHeader.DLC = 1;
 8000754:	2301      	movs	r3, #1
 8000756:	61fb      	str	r3, [r7, #28]
		  TxData[0] = button_value2;
 8000758:	4b24      	ldr	r3, [pc, #144]	; (80007ec <main+0x1b4>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	713b      	strb	r3, [r7, #4]
		  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000760:	463b      	mov	r3, r7
 8000762:	1d3a      	adds	r2, r7, #4
 8000764:	f107 010c 	add.w	r1, r7, #12
 8000768:	4819      	ldr	r0, [pc, #100]	; (80007d0 <main+0x198>)
 800076a:	f001 fb7c 	bl	8001e66 <HAL_CAN_AddTxMessage>
	  }

	  // Gửi button nếu có flag : Xi Nhan Phải
	  if (flag_button3) {
 800076e:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <main+0x1b8>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	2b00      	cmp	r3, #0
 8000776:	d011      	beq.n	800079c <main+0x164>
		  flag_button3 = 0;
 8000778:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <main+0x1b8>)
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]

		  TxHeader.StdId = 0x104; // ID cho button
 800077e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000782:	60fb      	str	r3, [r7, #12]

		  TxHeader.DLC = 1;
 8000784:	2301      	movs	r3, #1
 8000786:	61fb      	str	r3, [r7, #28]
		  TxData[0] = led_status_right;
 8000788:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <main+0x1bc>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	713b      	strb	r3, [r7, #4]
		  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 800078e:	463b      	mov	r3, r7
 8000790:	1d3a      	adds	r2, r7, #4
 8000792:	f107 010c 	add.w	r1, r7, #12
 8000796:	480e      	ldr	r0, [pc, #56]	; (80007d0 <main+0x198>)
 8000798:	f001 fb65 	bl	8001e66 <HAL_CAN_AddTxMessage>
	  }

	  HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 800079c:	463b      	mov	r3, r7
 800079e:	1d3a      	adds	r2, r7, #4
 80007a0:	f107 010c 	add.w	r1, r7, #12
 80007a4:	480a      	ldr	r0, [pc, #40]	; (80007d0 <main+0x198>)
 80007a6:	f001 fb5e 	bl	8001e66 <HAL_CAN_AddTxMessage>
 80007aa:	4603      	mov	r3, r0
 80007ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	  if (status != HAL_OK) {
 80007b0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	f43f af66 	beq.w	8000686 <main+0x4e>
		  // Blink LED để báo lỗi
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80007ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007be:	480e      	ldr	r0, [pc, #56]	; (80007f8 <main+0x1c0>)
 80007c0:	f002 f90d 	bl	80029de <HAL_GPIO_TogglePin>
  {
 80007c4:	e75f      	b.n	8000686 <main+0x4e>
 80007c6:	bf00      	nop
 80007c8:	20000114 	.word	0x20000114
 80007cc:	20000074 	.word	0x20000074
 80007d0:	200000bc 	.word	0x200000bc
 80007d4:	20000006 	.word	0x20000006
 80007d8:	2000003a 	.word	0x2000003a
 80007dc:	2000006a 	.word	0x2000006a
 80007e0:	2000003b 	.word	0x2000003b
 80007e4:	2000006c 	.word	0x2000006c
 80007e8:	2000003c 	.word	0x2000003c
 80007ec:	20000002 	.word	0x20000002
 80007f0:	2000003d 	.word	0x2000003d
 80007f4:	2000006d 	.word	0x2000006d
 80007f8:	40011000 	.word	0x40011000

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b094      	sub	sp, #80	; 0x50
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000806:	2228      	movs	r2, #40	; 0x28
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f003 fdfc 	bl	8004408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800082c:	2302      	movs	r3, #2
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000830:	2301      	movs	r3, #1
 8000832:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000834:	2310      	movs	r3, #16
 8000836:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000838:	2302      	movs	r3, #2
 800083a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800083c:	2300      	movs	r3, #0
 800083e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000840:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000844:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000846:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800084a:	4618      	mov	r0, r3
 800084c:	f002 f8f8 	bl	8002a40 <HAL_RCC_OscConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000856:	f000 fa3d 	bl	8000cd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085a:	230f      	movs	r3, #15
 800085c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085e:	2302      	movs	r3, #2
 8000860:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	2101      	movs	r1, #1
 8000874:	4618      	mov	r0, r3
 8000876:	f002 fb63 	bl	8002f40 <HAL_RCC_ClockConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000880:	f000 fa28 	bl	8000cd4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000884:	2302      	movs	r3, #2
 8000886:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000888:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800088c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	4618      	mov	r0, r3
 8000892:	f002 fccf 	bl	8003234 <HAL_RCCEx_PeriphCLKConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800089c:	f000 fa1a 	bl	8000cd4 <Error_Handler>
  }
}
 80008a0:	bf00      	nop
 80008a2:	3750      	adds	r7, #80	; 0x50
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80008b8:	4b18      	ldr	r3, [pc, #96]	; (800091c <MX_ADC1_Init+0x74>)
 80008ba:	4a19      	ldr	r2, [pc, #100]	; (8000920 <MX_ADC1_Init+0x78>)
 80008bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008be:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_ADC1_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008c4:	4b15      	ldr	r3, [pc, #84]	; (800091c <MX_ADC1_Init+0x74>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_ADC1_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_ADC1_Init+0x74>)
 80008d2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80008d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008d8:	4b10      	ldr	r3, [pc, #64]	; (800091c <MX_ADC1_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_ADC1_Init+0x74>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008e4:	480d      	ldr	r0, [pc, #52]	; (800091c <MX_ADC1_Init+0x74>)
 80008e6:	f000 fc5f 	bl	80011a8 <HAL_ADC_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80008f0:	f000 f9f0 	bl	8000cd4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008f4:	2303      	movs	r3, #3
 80008f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008f8:	2301      	movs	r3, #1
 80008fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	4619      	mov	r1, r3
 8000904:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_ADC1_Init+0x74>)
 8000906:	f000 ff13 	bl	8001730 <HAL_ADC_ConfigChannel>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000910:	f000 f9e0 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	200000e4 	.word	0x200000e4
 8000920:	40012400 	.word	0x40012400

08000924 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800092a:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <MX_CAN_Init+0x9c>)
 800092c:	4a25      	ldr	r2, [pc, #148]	; (80009c4 <MX_CAN_Init+0xa0>)
 800092e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000930:	4b23      	ldr	r3, [pc, #140]	; (80009c0 <MX_CAN_Init+0x9c>)
 8000932:	2210      	movs	r2, #16
 8000934:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000936:	4b22      	ldr	r3, [pc, #136]	; (80009c0 <MX_CAN_Init+0x9c>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800093c:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <MX_CAN_Init+0x9c>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000942:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <MX_CAN_Init+0x9c>)
 8000944:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000948:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800094a:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <MX_CAN_Init+0x9c>)
 800094c:	2200      	movs	r2, #0
 800094e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000950:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <MX_CAN_Init+0x9c>)
 8000952:	2200      	movs	r2, #0
 8000954:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000956:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <MX_CAN_Init+0x9c>)
 8000958:	2200      	movs	r2, #0
 800095a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800095c:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <MX_CAN_Init+0x9c>)
 800095e:	2200      	movs	r2, #0
 8000960:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000962:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <MX_CAN_Init+0x9c>)
 8000964:	2200      	movs	r2, #0
 8000966:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000968:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <MX_CAN_Init+0x9c>)
 800096a:	2200      	movs	r2, #0
 800096c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800096e:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_CAN_Init+0x9c>)
 8000970:	2200      	movs	r2, #0
 8000972:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000974:	4812      	ldr	r0, [pc, #72]	; (80009c0 <MX_CAN_Init+0x9c>)
 8000976:	f001 f86e 	bl	8001a56 <HAL_CAN_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000980:	f000 f9a8 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterBank = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000988:	2300      	movs	r3, #0
 800098a:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800098c:	2301      	movs	r3, #1
 800098e:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000990:	2300      	movs	r3, #0
 8000992:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000994:	2300      	movs	r3, #0
 8000996:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000998:	2300      	movs	r3, #0
 800099a:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80009a4:	2301      	movs	r3, #1
 80009a6:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80009a8:	230e      	movs	r3, #14
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 80009ac:	463b      	mov	r3, r7
 80009ae:	4619      	mov	r1, r3
 80009b0:	4803      	ldr	r0, [pc, #12]	; (80009c0 <MX_CAN_Init+0x9c>)
 80009b2:	f001 f94b 	bl	8001c4c <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	3728      	adds	r7, #40	; 0x28
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200000bc 	.word	0x200000bc
 80009c4:	40006400 	.word	0x40006400

080009c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08e      	sub	sp, #56	; 0x38
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009dc:	f107 0320 	add.w	r3, r7, #32
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
 80009f4:	615a      	str	r2, [r3, #20]
 80009f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009f8:	4b32      	ldr	r3, [pc, #200]	; (8000ac4 <MX_TIM2_Init+0xfc>)
 80009fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8000a00:	4b30      	ldr	r3, [pc, #192]	; (8000ac4 <MX_TIM2_Init+0xfc>)
 8000a02:	221f      	movs	r2, #31
 8000a04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a06:	4b2f      	ldr	r3, [pc, #188]	; (8000ac4 <MX_TIM2_Init+0xfc>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000a0c:	4b2d      	ldr	r3, [pc, #180]	; (8000ac4 <MX_TIM2_Init+0xfc>)
 8000a0e:	2264      	movs	r2, #100	; 0x64
 8000a10:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a12:	4b2c      	ldr	r3, [pc, #176]	; (8000ac4 <MX_TIM2_Init+0xfc>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a18:	4b2a      	ldr	r3, [pc, #168]	; (8000ac4 <MX_TIM2_Init+0xfc>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a1e:	4829      	ldr	r0, [pc, #164]	; (8000ac4 <MX_TIM2_Init+0xfc>)
 8000a20:	f002 fd74 	bl	800350c <HAL_TIM_Base_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000a2a:	f000 f953 	bl	8000cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4822      	ldr	r0, [pc, #136]	; (8000ac4 <MX_TIM2_Init+0xfc>)
 8000a3c:	f003 f8b4 	bl	8003ba8 <HAL_TIM_ConfigClockSource>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000a46:	f000 f945 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a4a:	481e      	ldr	r0, [pc, #120]	; (8000ac4 <MX_TIM2_Init+0xfc>)
 8000a4c:	f002 fe00 	bl	8003650 <HAL_TIM_PWM_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000a56:	f000 f93d 	bl	8000cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a62:	f107 0320 	add.w	r3, r7, #32
 8000a66:	4619      	mov	r1, r3
 8000a68:	4816      	ldr	r0, [pc, #88]	; (8000ac4 <MX_TIM2_Init+0xfc>)
 8000a6a:	f003 fc39 	bl	80042e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000a74:	f000 f92e 	bl	8000cd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a78:	2360      	movs	r3, #96	; 0x60
 8000a7a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <MX_TIM2_Init+0xfc>)
 8000a90:	f002 ffc8 	bl	8003a24 <HAL_TIM_PWM_ConfigChannel>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000a9a:	f000 f91b 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <MX_TIM2_Init+0xfc>)
 8000aa6:	f002 ffbd 	bl	8003a24 <HAL_TIM_PWM_ConfigChannel>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8000ab0:	f000 f910 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ab4:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <MX_TIM2_Init+0xfc>)
 8000ab6:	f000 fa0d 	bl	8000ed4 <HAL_TIM_MspPostInit>

}
 8000aba:	bf00      	nop
 8000abc:	3738      	adds	r7, #56	; 0x38
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000114 	.word	0x20000114

08000ac8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000adc:	463b      	mov	r3, r7
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <MX_TIM4_Init+0x94>)
 8000ae6:	4a1e      	ldr	r2, [pc, #120]	; (8000b60 <MX_TIM4_Init+0x98>)
 8000ae8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 31999;
 8000aea:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <MX_TIM4_Init+0x94>)
 8000aec:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000af0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af2:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <MX_TIM4_Init+0x94>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 8000af8:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <MX_TIM4_Init+0x94>)
 8000afa:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000afe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b00:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <MX_TIM4_Init+0x94>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <MX_TIM4_Init+0x94>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b0c:	4813      	ldr	r0, [pc, #76]	; (8000b5c <MX_TIM4_Init+0x94>)
 8000b0e:	f002 fcfd 	bl	800350c <HAL_TIM_Base_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000b18:	f000 f8dc 	bl	8000cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	4619      	mov	r1, r3
 8000b28:	480c      	ldr	r0, [pc, #48]	; (8000b5c <MX_TIM4_Init+0x94>)
 8000b2a:	f003 f83d 	bl	8003ba8 <HAL_TIM_ConfigClockSource>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000b34:	f000 f8ce 	bl	8000cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b40:	463b      	mov	r3, r7
 8000b42:	4619      	mov	r1, r3
 8000b44:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_TIM4_Init+0x94>)
 8000b46:	f003 fbcb 	bl	80042e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000b50:	f000 f8c0 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	3718      	adds	r7, #24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000074 	.word	0x20000074
 8000b60:	40000800 	.word	0x40000800

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 0310 	add.w	r3, r7, #16
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b78:	4b50      	ldr	r3, [pc, #320]	; (8000cbc <MX_GPIO_Init+0x158>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a4f      	ldr	r2, [pc, #316]	; (8000cbc <MX_GPIO_Init+0x158>)
 8000b7e:	f043 0310 	orr.w	r3, r3, #16
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b4d      	ldr	r3, [pc, #308]	; (8000cbc <MX_GPIO_Init+0x158>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f003 0310 	and.w	r3, r3, #16
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b90:	4b4a      	ldr	r3, [pc, #296]	; (8000cbc <MX_GPIO_Init+0x158>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a49      	ldr	r2, [pc, #292]	; (8000cbc <MX_GPIO_Init+0x158>)
 8000b96:	f043 0320 	orr.w	r3, r3, #32
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b47      	ldr	r3, [pc, #284]	; (8000cbc <MX_GPIO_Init+0x158>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f003 0320 	and.w	r3, r3, #32
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba8:	4b44      	ldr	r3, [pc, #272]	; (8000cbc <MX_GPIO_Init+0x158>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	4a43      	ldr	r2, [pc, #268]	; (8000cbc <MX_GPIO_Init+0x158>)
 8000bae:	f043 0304 	orr.w	r3, r3, #4
 8000bb2:	6193      	str	r3, [r2, #24]
 8000bb4:	4b41      	ldr	r3, [pc, #260]	; (8000cbc <MX_GPIO_Init+0x158>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	f003 0304 	and.w	r3, r3, #4
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc0:	4b3e      	ldr	r3, [pc, #248]	; (8000cbc <MX_GPIO_Init+0x158>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a3d      	ldr	r2, [pc, #244]	; (8000cbc <MX_GPIO_Init+0x158>)
 8000bc6:	f043 0308 	orr.w	r3, r3, #8
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b3b      	ldr	r3, [pc, #236]	; (8000cbc <MX_GPIO_Init+0x158>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f003 0308 	and.w	r3, r3, #8
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bde:	4838      	ldr	r0, [pc, #224]	; (8000cc0 <MX_GPIO_Init+0x15c>)
 8000be0:	f001 fee5 	bl	80029ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_SET);
 8000be4:	2201      	movs	r2, #1
 8000be6:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000bea:	4836      	ldr	r0, [pc, #216]	; (8000cc4 <MX_GPIO_Init+0x160>)
 8000bec:	f001 fedf 	bl	80029ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c02:	f107 0310 	add.w	r3, r7, #16
 8000c06:	4619      	mov	r1, r3
 8000c08:	482d      	ldr	r0, [pc, #180]	; (8000cc0 <MX_GPIO_Init+0x15c>)
 8000c0a:	f001 fd35 	bl	8002678 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 8000c0e:	2331      	movs	r3, #49	; 0x31
 8000c10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c12:	4b2d      	ldr	r3, [pc, #180]	; (8000cc8 <MX_GPIO_Init+0x164>)
 8000c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1a:	f107 0310 	add.w	r3, r7, #16
 8000c1e:	4619      	mov	r1, r3
 8000c20:	482a      	ldr	r0, [pc, #168]	; (8000ccc <MX_GPIO_Init+0x168>)
 8000c22:	f001 fd29 	bl	8002678 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c26:	2302      	movs	r3, #2
 8000c28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c2a:	4b29      	ldr	r3, [pc, #164]	; (8000cd0 <MX_GPIO_Init+0x16c>)
 8000c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f107 0310 	add.w	r3, r7, #16
 8000c36:	4619      	mov	r1, r3
 8000c38:	4824      	ldr	r0, [pc, #144]	; (8000ccc <MX_GPIO_Init+0x168>)
 8000c3a:	f001 fd1d 	bl	8002678 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c3e:	2304      	movs	r3, #4
 8000c40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4a:	f107 0310 	add.w	r3, r7, #16
 8000c4e:	4619      	mov	r1, r3
 8000c50:	481e      	ldr	r0, [pc, #120]	; (8000ccc <MX_GPIO_Init+0x168>)
 8000c52:	f001 fd11 	bl	8002678 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000c56:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000c5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c68:	f107 0310 	add.w	r3, r7, #16
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4815      	ldr	r0, [pc, #84]	; (8000cc4 <MX_GPIO_Init+0x160>)
 8000c70:	f001 fd02 	bl	8002678 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2100      	movs	r1, #0
 8000c78:	2006      	movs	r0, #6
 8000c7a:	f001 fcc6 	bl	800260a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c7e:	2006      	movs	r0, #6
 8000c80:	f001 fcdf 	bl	8002642 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2100      	movs	r1, #0
 8000c88:	2007      	movs	r0, #7
 8000c8a:	f001 fcbe 	bl	800260a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000c8e:	2007      	movs	r0, #7
 8000c90:	f001 fcd7 	bl	8002642 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2100      	movs	r1, #0
 8000c98:	200a      	movs	r0, #10
 8000c9a:	f001 fcb6 	bl	800260a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000c9e:	200a      	movs	r0, #10
 8000ca0:	f001 fccf 	bl	8002642 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2017      	movs	r0, #23
 8000caa:	f001 fcae 	bl	800260a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000cae:	2017      	movs	r0, #23
 8000cb0:	f001 fcc7 	bl	8002642 <HAL_NVIC_EnableIRQ>

}
 8000cb4:	bf00      	nop
 8000cb6:	3720      	adds	r7, #32
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40011000 	.word	0x40011000
 8000cc4:	40010c00 	.word	0x40010c00
 8000cc8:	10310000 	.word	0x10310000
 8000ccc:	40010800 	.word	0x40010800
 8000cd0:	10210000 	.word	0x10210000

08000cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd8:	b672      	cpsid	i
}
 8000cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <Error_Handler+0x8>
	...

08000ce0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <HAL_MspInit+0x5c>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	4a14      	ldr	r2, [pc, #80]	; (8000d3c <HAL_MspInit+0x5c>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6193      	str	r3, [r2, #24]
 8000cf2:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_MspInit+0x5c>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <HAL_MspInit+0x5c>)
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <HAL_MspInit+0x5c>)
 8000d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d08:	61d3      	str	r3, [r2, #28]
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <HAL_MspInit+0x5c>)
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <HAL_MspInit+0x60>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <HAL_MspInit+0x60>)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d32:	bf00      	nop
 8000d34:	3714      	adds	r7, #20
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40010000 	.word	0x40010000

08000d44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0310 	add.w	r3, r7, #16
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a14      	ldr	r2, [pc, #80]	; (8000db0 <HAL_ADC_MspInit+0x6c>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d121      	bne.n	8000da8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d64:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <HAL_ADC_MspInit+0x70>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <HAL_ADC_MspInit+0x70>)
 8000d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d6e:	6193      	str	r3, [r2, #24]
 8000d70:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <HAL_ADC_MspInit+0x70>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7c:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <HAL_ADC_MspInit+0x70>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	4a0c      	ldr	r2, [pc, #48]	; (8000db4 <HAL_ADC_MspInit+0x70>)
 8000d82:	f043 0304 	orr.w	r3, r3, #4
 8000d86:	6193      	str	r3, [r2, #24]
 8000d88:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <HAL_ADC_MspInit+0x70>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f003 0304 	and.w	r3, r3, #4
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d94:	2308      	movs	r3, #8
 8000d96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	4619      	mov	r1, r3
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <HAL_ADC_MspInit+0x74>)
 8000da4:	f001 fc68 	bl	8002678 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000da8:	bf00      	nop
 8000daa:	3720      	adds	r7, #32
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40012400 	.word	0x40012400
 8000db4:	40021000 	.word	0x40021000
 8000db8:	40010800 	.word	0x40010800

08000dbc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a20      	ldr	r2, [pc, #128]	; (8000e58 <HAL_CAN_MspInit+0x9c>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d139      	bne.n	8000e50 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ddc:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <HAL_CAN_MspInit+0xa0>)
 8000dde:	69db      	ldr	r3, [r3, #28]
 8000de0:	4a1e      	ldr	r2, [pc, #120]	; (8000e5c <HAL_CAN_MspInit+0xa0>)
 8000de2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000de6:	61d3      	str	r3, [r2, #28]
 8000de8:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <HAL_CAN_MspInit+0xa0>)
 8000dea:	69db      	ldr	r3, [r3, #28]
 8000dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df4:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <HAL_CAN_MspInit+0xa0>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a18      	ldr	r2, [pc, #96]	; (8000e5c <HAL_CAN_MspInit+0xa0>)
 8000dfa:	f043 0304 	orr.w	r3, r3, #4
 8000dfe:	6193      	str	r3, [r2, #24]
 8000e00:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <HAL_CAN_MspInit+0xa0>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	f003 0304 	and.w	r3, r3, #4
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 0310 	add.w	r3, r7, #16
 8000e1e:	4619      	mov	r1, r3
 8000e20:	480f      	ldr	r0, [pc, #60]	; (8000e60 <HAL_CAN_MspInit+0xa4>)
 8000e22:	f001 fc29 	bl	8002678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e30:	2303      	movs	r3, #3
 8000e32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4809      	ldr	r0, [pc, #36]	; (8000e60 <HAL_CAN_MspInit+0xa4>)
 8000e3c:	f001 fc1c 	bl	8002678 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2100      	movs	r1, #0
 8000e44:	2015      	movs	r0, #21
 8000e46:	f001 fbe0 	bl	800260a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000e4a:	2015      	movs	r0, #21
 8000e4c:	f001 fbf9 	bl	8002642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000e50:	bf00      	nop
 8000e52:	3720      	adds	r7, #32
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40006400 	.word	0x40006400
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	40010800 	.word	0x40010800

08000e64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e74:	d10c      	bne.n	8000e90 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_TIM_Base_MspInit+0x68>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	4a14      	ldr	r2, [pc, #80]	; (8000ecc <HAL_TIM_Base_MspInit+0x68>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	61d3      	str	r3, [r2, #28]
 8000e82:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_TIM_Base_MspInit+0x68>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e8e:	e018      	b.n	8000ec2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <HAL_TIM_Base_MspInit+0x6c>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d113      	bne.n	8000ec2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <HAL_TIM_Base_MspInit+0x68>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <HAL_TIM_Base_MspInit+0x68>)
 8000ea0:	f043 0304 	orr.w	r3, r3, #4
 8000ea4:	61d3      	str	r3, [r2, #28]
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <HAL_TIM_Base_MspInit+0x68>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	f003 0304 	and.w	r3, r3, #4
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	201e      	movs	r0, #30
 8000eb8:	f001 fba7 	bl	800260a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000ebc:	201e      	movs	r0, #30
 8000ebe:	f001 fbc0 	bl	8002642 <HAL_NVIC_EnableIRQ>
}
 8000ec2:	bf00      	nop
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40000800 	.word	0x40000800

08000ed4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ef2:	d142      	bne.n	8000f7a <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef4:	4b23      	ldr	r3, [pc, #140]	; (8000f84 <HAL_TIM_MspPostInit+0xb0>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	4a22      	ldr	r2, [pc, #136]	; (8000f84 <HAL_TIM_MspPostInit+0xb0>)
 8000efa:	f043 0304 	orr.w	r3, r3, #4
 8000efe:	6193      	str	r3, [r2, #24]
 8000f00:	4b20      	ldr	r3, [pc, #128]	; (8000f84 <HAL_TIM_MspPostInit+0xb0>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	f003 0304 	and.w	r3, r3, #4
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0c:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <HAL_TIM_MspPostInit+0xb0>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	4a1c      	ldr	r2, [pc, #112]	; (8000f84 <HAL_TIM_MspPostInit+0xb0>)
 8000f12:	f043 0308 	orr.w	r3, r3, #8
 8000f16:	6193      	str	r3, [r2, #24]
 8000f18:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <HAL_TIM_MspPostInit+0xb0>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	f003 0308 	and.w	r3, r3, #8
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	4813      	ldr	r0, [pc, #76]	; (8000f88 <HAL_TIM_MspPostInit+0xb4>)
 8000f3a:	f001 fb9d 	bl	8002678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f3e:	2308      	movs	r3, #8
 8000f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2302      	movs	r3, #2
 8000f48:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480e      	ldr	r0, [pc, #56]	; (8000f8c <HAL_TIM_MspPostInit+0xb8>)
 8000f52:	f001 fb91 	bl	8002678 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_TIM_MspPostInit+0xbc>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
 8000f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f66:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
 8000f74:	4a06      	ldr	r2, [pc, #24]	; (8000f90 <HAL_TIM_MspPostInit+0xbc>)
 8000f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f78:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	; 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40021000 	.word	0x40021000
 8000f88:	40010800 	.word	0x40010800
 8000f8c:	40010c00 	.word	0x40010c00
 8000f90:	40010000 	.word	0x40010000

08000f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <NMI_Handler+0x4>

08000f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <HardFault_Handler+0x4>

08000fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <MemManage_Handler+0x4>

08000fa6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <BusFault_Handler+0x4>

08000fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <UsageFault_Handler+0x4>

08000fb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr

08000fbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr

08000fca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr

08000fd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fda:	f000 f8a5 	bl	8001128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	f001 fd12 	bl	8002a10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000ff4:	2002      	movs	r0, #2
 8000ff6:	f001 fd0b 	bl	8002a10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001002:	2010      	movs	r0, #16
 8001004:	f001 fd04 	bl	8002a10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}

0800100c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <CAN1_RX1_IRQHandler+0x10>)
 8001012:	f000 fff7 	bl	8002004 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200000bc 	.word	0x200000bc

08001020 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001024:	2020      	movs	r0, #32
 8001026:	f001 fcf3 	bl	8002a10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001034:	4802      	ldr	r0, [pc, #8]	; (8001040 <TIM4_IRQHandler+0x10>)
 8001036:	f002 fc05 	bl	8003844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000074 	.word	0x20000074

08001044 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr

08001050 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001050:	f7ff fff8 	bl	8001044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001054:	480b      	ldr	r0, [pc, #44]	; (8001084 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001056:	490c      	ldr	r1, [pc, #48]	; (8001088 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001058:	4a0c      	ldr	r2, [pc, #48]	; (800108c <LoopFillZerobss+0x16>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800105c:	e002      	b.n	8001064 <LoopCopyDataInit>

0800105e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001062:	3304      	adds	r3, #4

08001064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001068:	d3f9      	bcc.n	800105e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106a:	4a09      	ldr	r2, [pc, #36]	; (8001090 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800106c:	4c09      	ldr	r4, [pc, #36]	; (8001094 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001070:	e001      	b.n	8001076 <LoopFillZerobss>

08001072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001074:	3204      	adds	r2, #4

08001076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001078:	d3fb      	bcc.n	8001072 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800107a:	f003 f9a1 	bl	80043c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800107e:	f7ff fadb 	bl	8000638 <main>
  bx lr
 8001082:	4770      	bx	lr
  ldr r0, =_sdata
 8001084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001088:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800108c:	08004478 	.word	0x08004478
  ldr r2, =_sbss
 8001090:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001094:	20000160 	.word	0x20000160

08001098 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001098:	e7fe      	b.n	8001098 <ADC1_2_IRQHandler>
	...

0800109c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <HAL_Init+0x28>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <HAL_Init+0x28>)
 80010a6:	f043 0310 	orr.w	r3, r3, #16
 80010aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ac:	2003      	movs	r0, #3
 80010ae:	f001 faa1 	bl	80025f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010b2:	2000      	movs	r0, #0
 80010b4:	f000 f808 	bl	80010c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b8:	f7ff fe12 	bl	8000ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40022000 	.word	0x40022000

080010c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <HAL_InitTick+0x54>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <HAL_InitTick+0x58>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	4619      	mov	r1, r3
 80010da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010de:	fbb3 f3f1 	udiv	r3, r3, r1
 80010e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f001 fab9 	bl	800265e <HAL_SYSTICK_Config>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e00e      	b.n	8001114 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b0f      	cmp	r3, #15
 80010fa:	d80a      	bhi.n	8001112 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010fc:	2200      	movs	r2, #0
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	f04f 30ff 	mov.w	r0, #4294967295
 8001104:	f001 fa81 	bl	800260a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001108:	4a06      	ldr	r2, [pc, #24]	; (8001124 <HAL_InitTick+0x5c>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800110e:	2300      	movs	r3, #0
 8001110:	e000      	b.n	8001114 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000008 	.word	0x20000008
 8001120:	20000010 	.word	0x20000010
 8001124:	2000000c 	.word	0x2000000c

08001128 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <HAL_IncTick+0x1c>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	461a      	mov	r2, r3
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <HAL_IncTick+0x20>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4413      	add	r3, r2
 8001138:	4a03      	ldr	r2, [pc, #12]	; (8001148 <HAL_IncTick+0x20>)
 800113a:	6013      	str	r3, [r2, #0]
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	20000010 	.word	0x20000010
 8001148:	2000015c 	.word	0x2000015c

0800114c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return uwTick;
 8001150:	4b02      	ldr	r3, [pc, #8]	; (800115c <HAL_GetTick+0x10>)
 8001152:	681b      	ldr	r3, [r3, #0]
}
 8001154:	4618      	mov	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	2000015c 	.word	0x2000015c

08001160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001168:	f7ff fff0 	bl	800114c <HAL_GetTick>
 800116c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001178:	d005      	beq.n	8001186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <HAL_Delay+0x44>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4413      	add	r3, r2
 8001184:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001186:	bf00      	nop
 8001188:	f7ff ffe0 	bl	800114c <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	429a      	cmp	r2, r3
 8001196:	d8f7      	bhi.n	8001188 <HAL_Delay+0x28>
  {
  }
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000010 	.word	0x20000010

080011a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011b0:	2300      	movs	r3, #0
 80011b2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e0be      	b.n	8001348 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d109      	bne.n	80011ec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff fdac 	bl	8000d44 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 fbf1 	bl	80019d4 <ADC_ConversionStop_Disable>
 80011f2:	4603      	mov	r3, r0
 80011f4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fa:	f003 0310 	and.w	r3, r3, #16
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f040 8099 	bne.w	8001336 <HAL_ADC_Init+0x18e>
 8001204:	7dfb      	ldrb	r3, [r7, #23]
 8001206:	2b00      	cmp	r3, #0
 8001208:	f040 8095 	bne.w	8001336 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001210:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001214:	f023 0302 	bic.w	r3, r3, #2
 8001218:	f043 0202 	orr.w	r2, r3, #2
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001228:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	7b1b      	ldrb	r3, [r3, #12]
 800122e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001230:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	4313      	orrs	r3, r2
 8001236:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001240:	d003      	beq.n	800124a <HAL_ADC_Init+0xa2>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d102      	bne.n	8001250 <HAL_ADC_Init+0xa8>
 800124a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800124e:	e000      	b.n	8001252 <HAL_ADC_Init+0xaa>
 8001250:	2300      	movs	r3, #0
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	7d1b      	ldrb	r3, [r3, #20]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d119      	bne.n	8001294 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	7b1b      	ldrb	r3, [r3, #12]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d109      	bne.n	800127c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	3b01      	subs	r3, #1
 800126e:	035a      	lsls	r2, r3, #13
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	e00b      	b.n	8001294 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001280:	f043 0220 	orr.w	r2, r3, #32
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128c:	f043 0201 	orr.w	r2, r3, #1
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	430a      	orrs	r2, r1
 80012a6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	689a      	ldr	r2, [r3, #8]
 80012ae:	4b28      	ldr	r3, [pc, #160]	; (8001350 <HAL_ADC_Init+0x1a8>)
 80012b0:	4013      	ands	r3, r2
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	6812      	ldr	r2, [r2, #0]
 80012b6:	68b9      	ldr	r1, [r7, #8]
 80012b8:	430b      	orrs	r3, r1
 80012ba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012c4:	d003      	beq.n	80012ce <HAL_ADC_Init+0x126>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d104      	bne.n	80012d8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	051b      	lsls	r3, r3, #20
 80012d6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012de:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	430a      	orrs	r2, r1
 80012ea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	4b18      	ldr	r3, [pc, #96]	; (8001354 <HAL_ADC_Init+0x1ac>)
 80012f4:	4013      	ands	r3, r2
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d10b      	bne.n	8001314 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001306:	f023 0303 	bic.w	r3, r3, #3
 800130a:	f043 0201 	orr.w	r2, r3, #1
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001312:	e018      	b.n	8001346 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001318:	f023 0312 	bic.w	r3, r3, #18
 800131c:	f043 0210 	orr.w	r2, r3, #16
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001328:	f043 0201 	orr.w	r2, r3, #1
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001334:	e007      	b.n	8001346 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133a:	f043 0210 	orr.w	r2, r3, #16
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001346:	7dfb      	ldrb	r3, [r7, #23]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	ffe1f7fd 	.word	0xffe1f7fd
 8001354:	ff1f0efe 	.word	0xff1f0efe

08001358 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001360:	2300      	movs	r3, #0
 8001362:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800136a:	2b01      	cmp	r3, #1
 800136c:	d101      	bne.n	8001372 <HAL_ADC_Start+0x1a>
 800136e:	2302      	movs	r3, #2
 8001370:	e098      	b.n	80014a4 <HAL_ADC_Start+0x14c>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 fad0 	bl	8001920 <ADC_Enable>
 8001380:	4603      	mov	r3, r0
 8001382:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	2b00      	cmp	r3, #0
 8001388:	f040 8087 	bne.w	800149a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001394:	f023 0301 	bic.w	r3, r3, #1
 8001398:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a41      	ldr	r2, [pc, #260]	; (80014ac <HAL_ADC_Start+0x154>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d105      	bne.n	80013b6 <HAL_ADC_Start+0x5e>
 80013aa:	4b41      	ldr	r3, [pc, #260]	; (80014b0 <HAL_ADC_Start+0x158>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d115      	bne.n	80013e2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d026      	beq.n	800141e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013e0:	e01d      	b.n	800141e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a2f      	ldr	r2, [pc, #188]	; (80014b0 <HAL_ADC_Start+0x158>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d004      	beq.n	8001402 <HAL_ADC_Start+0xaa>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a2b      	ldr	r2, [pc, #172]	; (80014ac <HAL_ADC_Start+0x154>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d10d      	bne.n	800141e <HAL_ADC_Start+0xc6>
 8001402:	4b2b      	ldr	r3, [pc, #172]	; (80014b0 <HAL_ADC_Start+0x158>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800140a:	2b00      	cmp	r3, #0
 800140c:	d007      	beq.n	800141e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001412:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001416:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001422:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d006      	beq.n	8001438 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142e:	f023 0206 	bic.w	r2, r3, #6
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	62da      	str	r2, [r3, #44]	; 0x2c
 8001436:	e002      	b.n	800143e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f06f 0202 	mvn.w	r2, #2
 800144e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800145a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800145e:	d113      	bne.n	8001488 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001464:	4a11      	ldr	r2, [pc, #68]	; (80014ac <HAL_ADC_Start+0x154>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d105      	bne.n	8001476 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800146a:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <HAL_ADC_Start+0x158>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001472:	2b00      	cmp	r3, #0
 8001474:	d108      	bne.n	8001488 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	e00c      	b.n	80014a2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	e003      	b.n	80014a2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40012800 	.word	0x40012800
 80014b0:	40012400 	.word	0x40012400

080014b4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d101      	bne.n	80014ce <HAL_ADC_Stop+0x1a>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e01a      	b.n	8001504 <HAL_ADC_Stop+0x50>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2201      	movs	r2, #1
 80014d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 fa7c 	bl	80019d4 <ADC_ConversionStop_Disable>
 80014dc:	4603      	mov	r3, r0
 80014de:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d109      	bne.n	80014fa <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014ee:	f023 0301 	bic.w	r3, r3, #1
 80014f2:	f043 0201 	orr.w	r2, r3, #1
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001502:	7bfb      	ldrb	r3, [r7, #15]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b087      	sub	sp, #28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001522:	f7ff fe13 	bl	800114c <HAL_GetTick>
 8001526:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00b      	beq.n	800154e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153a:	f043 0220 	orr.w	r2, r3, #32
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e0d3      	b.n	80016f6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001558:	2b00      	cmp	r3, #0
 800155a:	d131      	bne.n	80015c0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001562:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001566:	2b00      	cmp	r3, #0
 8001568:	d12a      	bne.n	80015c0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800156a:	e021      	b.n	80015b0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001572:	d01d      	beq.n	80015b0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d007      	beq.n	800158a <HAL_ADC_PollForConversion+0x7e>
 800157a:	f7ff fde7 	bl	800114c <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	429a      	cmp	r2, r3
 8001588:	d212      	bcs.n	80015b0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10b      	bne.n	80015b0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159c:	f043 0204 	orr.w	r2, r3, #4
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e0a2      	b.n	80016f6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0d6      	beq.n	800156c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80015be:	e070      	b.n	80016a2 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80015c0:	4b4f      	ldr	r3, [pc, #316]	; (8001700 <HAL_ADC_PollForConversion+0x1f4>)
 80015c2:	681c      	ldr	r4, [r3, #0]
 80015c4:	2002      	movs	r0, #2
 80015c6:	f001 feeb 	bl	80033a0 <HAL_RCCEx_GetPeriphCLKFreq>
 80015ca:	4603      	mov	r3, r0
 80015cc:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6919      	ldr	r1, [r3, #16]
 80015d6:	4b4b      	ldr	r3, [pc, #300]	; (8001704 <HAL_ADC_PollForConversion+0x1f8>)
 80015d8:	400b      	ands	r3, r1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d118      	bne.n	8001610 <HAL_ADC_PollForConversion+0x104>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68d9      	ldr	r1, [r3, #12]
 80015e4:	4b48      	ldr	r3, [pc, #288]	; (8001708 <HAL_ADC_PollForConversion+0x1fc>)
 80015e6:	400b      	ands	r3, r1
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d111      	bne.n	8001610 <HAL_ADC_PollForConversion+0x104>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6919      	ldr	r1, [r3, #16]
 80015f2:	4b46      	ldr	r3, [pc, #280]	; (800170c <HAL_ADC_PollForConversion+0x200>)
 80015f4:	400b      	ands	r3, r1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d108      	bne.n	800160c <HAL_ADC_PollForConversion+0x100>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	68d9      	ldr	r1, [r3, #12]
 8001600:	4b43      	ldr	r3, [pc, #268]	; (8001710 <HAL_ADC_PollForConversion+0x204>)
 8001602:	400b      	ands	r3, r1
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <HAL_ADC_PollForConversion+0x100>
 8001608:	2314      	movs	r3, #20
 800160a:	e020      	b.n	800164e <HAL_ADC_PollForConversion+0x142>
 800160c:	2329      	movs	r3, #41	; 0x29
 800160e:	e01e      	b.n	800164e <HAL_ADC_PollForConversion+0x142>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6919      	ldr	r1, [r3, #16]
 8001616:	4b3d      	ldr	r3, [pc, #244]	; (800170c <HAL_ADC_PollForConversion+0x200>)
 8001618:	400b      	ands	r3, r1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d106      	bne.n	800162c <HAL_ADC_PollForConversion+0x120>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68d9      	ldr	r1, [r3, #12]
 8001624:	4b3a      	ldr	r3, [pc, #232]	; (8001710 <HAL_ADC_PollForConversion+0x204>)
 8001626:	400b      	ands	r3, r1
 8001628:	2b00      	cmp	r3, #0
 800162a:	d00d      	beq.n	8001648 <HAL_ADC_PollForConversion+0x13c>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6919      	ldr	r1, [r3, #16]
 8001632:	4b38      	ldr	r3, [pc, #224]	; (8001714 <HAL_ADC_PollForConversion+0x208>)
 8001634:	400b      	ands	r3, r1
 8001636:	2b00      	cmp	r3, #0
 8001638:	d108      	bne.n	800164c <HAL_ADC_PollForConversion+0x140>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68d9      	ldr	r1, [r3, #12]
 8001640:	4b34      	ldr	r3, [pc, #208]	; (8001714 <HAL_ADC_PollForConversion+0x208>)
 8001642:	400b      	ands	r3, r1
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_ADC_PollForConversion+0x140>
 8001648:	2354      	movs	r3, #84	; 0x54
 800164a:	e000      	b.n	800164e <HAL_ADC_PollForConversion+0x142>
 800164c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800164e:	fb02 f303 	mul.w	r3, r2, r3
 8001652:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001654:	e021      	b.n	800169a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800165c:	d01a      	beq.n	8001694 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d007      	beq.n	8001674 <HAL_ADC_PollForConversion+0x168>
 8001664:	f7ff fd72 	bl	800114c <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	429a      	cmp	r2, r3
 8001672:	d20f      	bcs.n	8001694 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	429a      	cmp	r2, r3
 800167a:	d90b      	bls.n	8001694 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001680:	f043 0204 	orr.w	r2, r3, #4
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e030      	b.n	80016f6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3301      	adds	r3, #1
 8001698:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d8d9      	bhi.n	8001656 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f06f 0212 	mvn.w	r2, #18
 80016aa:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80016c2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016c6:	d115      	bne.n	80016f4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d111      	bne.n	80016f4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d105      	bne.n	80016f4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	f043 0201 	orr.w	r2, r3, #1
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	371c      	adds	r7, #28
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd90      	pop	{r4, r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000008 	.word	0x20000008
 8001704:	24924924 	.word	0x24924924
 8001708:	00924924 	.word	0x00924924
 800170c:	12492492 	.word	0x12492492
 8001710:	00492492 	.word	0x00492492
 8001714:	00249249 	.word	0x00249249

08001718 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001748:	2b01      	cmp	r3, #1
 800174a:	d101      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x20>
 800174c:	2302      	movs	r3, #2
 800174e:	e0dc      	b.n	800190a <HAL_ADC_ConfigChannel+0x1da>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b06      	cmp	r3, #6
 800175e:	d81c      	bhi.n	800179a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	4613      	mov	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	3b05      	subs	r3, #5
 8001772:	221f      	movs	r2, #31
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	4019      	ands	r1, r3
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	6818      	ldr	r0, [r3, #0]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	3b05      	subs	r3, #5
 800178c:	fa00 f203 	lsl.w	r2, r0, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	635a      	str	r2, [r3, #52]	; 0x34
 8001798:	e03c      	b.n	8001814 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b0c      	cmp	r3, #12
 80017a0:	d81c      	bhi.n	80017dc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	3b23      	subs	r3, #35	; 0x23
 80017b4:	221f      	movs	r2, #31
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	4019      	ands	r1, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	6818      	ldr	r0, [r3, #0]
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	3b23      	subs	r3, #35	; 0x23
 80017ce:	fa00 f203 	lsl.w	r2, r0, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	631a      	str	r2, [r3, #48]	; 0x30
 80017da:	e01b      	b.n	8001814 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	3b41      	subs	r3, #65	; 0x41
 80017ee:	221f      	movs	r2, #31
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	4019      	ands	r1, r3
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	6818      	ldr	r0, [r3, #0]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685a      	ldr	r2, [r3, #4]
 8001800:	4613      	mov	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	3b41      	subs	r3, #65	; 0x41
 8001808:	fa00 f203 	lsl.w	r2, r0, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b09      	cmp	r3, #9
 800181a:	d91c      	bls.n	8001856 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68d9      	ldr	r1, [r3, #12]
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	4613      	mov	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4413      	add	r3, r2
 800182c:	3b1e      	subs	r3, #30
 800182e:	2207      	movs	r2, #7
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	4019      	ands	r1, r3
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	6898      	ldr	r0, [r3, #8]
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4613      	mov	r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	4413      	add	r3, r2
 8001846:	3b1e      	subs	r3, #30
 8001848:	fa00 f203 	lsl.w	r2, r0, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	e019      	b.n	800188a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6919      	ldr	r1, [r3, #16]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4613      	mov	r3, r2
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	4413      	add	r3, r2
 8001866:	2207      	movs	r2, #7
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	4019      	ands	r1, r3
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	6898      	ldr	r0, [r3, #8]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4613      	mov	r3, r2
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4413      	add	r3, r2
 800187e:	fa00 f203 	lsl.w	r2, r0, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b10      	cmp	r3, #16
 8001890:	d003      	beq.n	800189a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001896:	2b11      	cmp	r3, #17
 8001898:	d132      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a1d      	ldr	r2, [pc, #116]	; (8001914 <HAL_ADC_ConfigChannel+0x1e4>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d125      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d126      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80018c0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b10      	cmp	r3, #16
 80018c8:	d11a      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018ca:	4b13      	ldr	r3, [pc, #76]	; (8001918 <HAL_ADC_ConfigChannel+0x1e8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a13      	ldr	r2, [pc, #76]	; (800191c <HAL_ADC_ConfigChannel+0x1ec>)
 80018d0:	fba2 2303 	umull	r2, r3, r2, r3
 80018d4:	0c9a      	lsrs	r2, r3, #18
 80018d6:	4613      	mov	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018e0:	e002      	b.n	80018e8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	3b01      	subs	r3, #1
 80018e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f9      	bne.n	80018e2 <HAL_ADC_ConfigChannel+0x1b2>
 80018ee:	e007      	b.n	8001900 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f4:	f043 0220 	orr.w	r2, r3, #32
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001908:	7bfb      	ldrb	r3, [r7, #15]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	40012400 	.word	0x40012400
 8001918:	20000008 	.word	0x20000008
 800191c:	431bde83 	.word	0x431bde83

08001920 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800192c:	2300      	movs	r3, #0
 800192e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b01      	cmp	r3, #1
 800193c:	d040      	beq.n	80019c0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f042 0201 	orr.w	r2, r2, #1
 800194c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800194e:	4b1f      	ldr	r3, [pc, #124]	; (80019cc <ADC_Enable+0xac>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a1f      	ldr	r2, [pc, #124]	; (80019d0 <ADC_Enable+0xb0>)
 8001954:	fba2 2303 	umull	r2, r3, r2, r3
 8001958:	0c9b      	lsrs	r3, r3, #18
 800195a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800195c:	e002      	b.n	8001964 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	3b01      	subs	r3, #1
 8001962:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f9      	bne.n	800195e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800196a:	f7ff fbef 	bl	800114c <HAL_GetTick>
 800196e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001970:	e01f      	b.n	80019b2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001972:	f7ff fbeb 	bl	800114c <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d918      	bls.n	80019b2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b01      	cmp	r3, #1
 800198c:	d011      	beq.n	80019b2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001992:	f043 0210 	orr.w	r2, r3, #16
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199e:	f043 0201 	orr.w	r2, r3, #1
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e007      	b.n	80019c2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d1d8      	bne.n	8001972 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000008 	.word	0x20000008
 80019d0:	431bde83 	.word	0x431bde83

080019d4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d12e      	bne.n	8001a4c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0201 	bic.w	r2, r2, #1
 80019fc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019fe:	f7ff fba5 	bl	800114c <HAL_GetTick>
 8001a02:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a04:	e01b      	b.n	8001a3e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a06:	f7ff fba1 	bl	800114c <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d914      	bls.n	8001a3e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d10d      	bne.n	8001a3e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a26:	f043 0210 	orr.w	r2, r3, #16
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a32:	f043 0201 	orr.w	r2, r3, #1
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e007      	b.n	8001a4e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d0dc      	beq.n	8001a06 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b084      	sub	sp, #16
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e0ed      	b.n	8001c44 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d102      	bne.n	8001a7a <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff f9a1 	bl	8000dbc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f042 0201 	orr.w	r2, r2, #1
 8001a88:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a8a:	f7ff fb5f 	bl	800114c <HAL_GetTick>
 8001a8e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a90:	e012      	b.n	8001ab8 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a92:	f7ff fb5b 	bl	800114c <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b0a      	cmp	r3, #10
 8001a9e:	d90b      	bls.n	8001ab8 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2205      	movs	r2, #5
 8001ab0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e0c5      	b.n	8001c44 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0e5      	beq.n	8001a92 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 0202 	bic.w	r2, r2, #2
 8001ad4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ad6:	f7ff fb39 	bl	800114c <HAL_GetTick>
 8001ada:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001adc:	e012      	b.n	8001b04 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ade:	f7ff fb35 	bl	800114c <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b0a      	cmp	r3, #10
 8001aea:	d90b      	bls.n	8001b04 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2205      	movs	r2, #5
 8001afc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e09f      	b.n	8001c44 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1e5      	bne.n	8001ade <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	7e1b      	ldrb	r3, [r3, #24]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d108      	bne.n	8001b2c <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	e007      	b.n	8001b3c <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	7e5b      	ldrb	r3, [r3, #25]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d108      	bne.n	8001b56 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	e007      	b.n	8001b66 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	7e9b      	ldrb	r3, [r3, #26]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d108      	bne.n	8001b80 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f042 0220 	orr.w	r2, r2, #32
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	e007      	b.n	8001b90 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 0220 	bic.w	r2, r2, #32
 8001b8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	7edb      	ldrb	r3, [r3, #27]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d108      	bne.n	8001baa <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0210 	bic.w	r2, r2, #16
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	e007      	b.n	8001bba <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f042 0210 	orr.w	r2, r2, #16
 8001bb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	7f1b      	ldrb	r3, [r3, #28]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d108      	bne.n	8001bd4 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f042 0208 	orr.w	r2, r2, #8
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	e007      	b.n	8001be4 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0208 	bic.w	r2, r2, #8
 8001be2:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	7f5b      	ldrb	r3, [r3, #29]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d108      	bne.n	8001bfe <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0204 	orr.w	r2, r2, #4
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	e007      	b.n	8001c0e <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 0204 	bic.w	r2, r2, #4
 8001c0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	ea42 0103 	orr.w	r1, r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	1e5a      	subs	r2, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b087      	sub	sp, #28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c62:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c64:	7cfb      	ldrb	r3, [r7, #19]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d003      	beq.n	8001c72 <HAL_CAN_ConfigFilter+0x26>
 8001c6a:	7cfb      	ldrb	r3, [r7, #19]
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	f040 80aa 	bne.w	8001dc6 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c78:	f043 0201 	orr.w	r2, r3, #1
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	f003 031f 	and.w	r3, r3, #31
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	401a      	ands	r2, r3
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d123      	bne.n	8001cf4 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001cce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	3248      	adds	r2, #72	; 0x48
 8001cd4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ce8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cea:	6979      	ldr	r1, [r7, #20]
 8001cec:	3348      	adds	r3, #72	; 0x48
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	440b      	add	r3, r1
 8001cf2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d122      	bne.n	8001d42 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	431a      	orrs	r2, r3
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d1c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	3248      	adds	r2, #72	; 0x48
 8001d22:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d36:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d38:	6979      	ldr	r1, [r7, #20]
 8001d3a:	3348      	adds	r3, #72	; 0x48
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	440b      	add	r3, r1
 8001d40:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d109      	bne.n	8001d5e <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	401a      	ands	r2, r3
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001d5c:	e007      	b.n	8001d6e <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	431a      	orrs	r2, r3
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d109      	bne.n	8001d8a <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	401a      	ands	r2, r3
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001d88:	e007      	b.n	8001d9a <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	431a      	orrs	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d107      	bne.n	8001db2 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	431a      	orrs	r2, r3
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001db8:	f023 0201 	bic.w	r2, r3, #1
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e006      	b.n	8001dd4 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
  }
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	371c      	adds	r7, #28
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr

08001dde <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b084      	sub	sp, #16
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d12e      	bne.n	8001e50 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2202      	movs	r2, #2
 8001df6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 0201 	bic.w	r2, r2, #1
 8001e08:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e0a:	f7ff f99f 	bl	800114c <HAL_GetTick>
 8001e0e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e10:	e012      	b.n	8001e38 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e12:	f7ff f99b 	bl	800114c <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b0a      	cmp	r3, #10
 8001e1e:	d90b      	bls.n	8001e38 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2205      	movs	r2, #5
 8001e30:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e012      	b.n	8001e5e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1e5      	bne.n	8001e12 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	e006      	b.n	8001e5e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
  }
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b089      	sub	sp, #36	; 0x24
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60f8      	str	r0, [r7, #12]
 8001e6e:	60b9      	str	r1, [r7, #8]
 8001e70:	607a      	str	r2, [r7, #4]
 8001e72:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e84:	7ffb      	ldrb	r3, [r7, #31]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d003      	beq.n	8001e92 <HAL_CAN_AddTxMessage+0x2c>
 8001e8a:	7ffb      	ldrb	r3, [r7, #31]
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	f040 80ad 	bne.w	8001fec <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10a      	bne.n	8001eb2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d105      	bne.n	8001eb2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f000 8095 	beq.w	8001fdc <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	0e1b      	lsrs	r3, r3, #24
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	409a      	lsls	r2, r3
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10d      	bne.n	8001eea <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ed8:	68f9      	ldr	r1, [r7, #12]
 8001eda:	6809      	ldr	r1, [r1, #0]
 8001edc:	431a      	orrs	r2, r3
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	3318      	adds	r3, #24
 8001ee2:	011b      	lsls	r3, r3, #4
 8001ee4:	440b      	add	r3, r1
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	e00f      	b.n	8001f0a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ef4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001efa:	68f9      	ldr	r1, [r7, #12]
 8001efc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001efe:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	3318      	adds	r3, #24
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	440b      	add	r3, r1
 8001f08:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6819      	ldr	r1, [r3, #0]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	691a      	ldr	r2, [r3, #16]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	3318      	adds	r3, #24
 8001f16:	011b      	lsls	r3, r3, #4
 8001f18:	440b      	add	r3, r1
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	7d1b      	ldrb	r3, [r3, #20]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d111      	bne.n	8001f4a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	3318      	adds	r3, #24
 8001f2e:	011b      	lsls	r3, r3, #4
 8001f30:	4413      	add	r3, r2
 8001f32:	3304      	adds	r3, #4
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	6811      	ldr	r1, [r2, #0]
 8001f3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	3318      	adds	r3, #24
 8001f42:	011b      	lsls	r3, r3, #4
 8001f44:	440b      	add	r3, r1
 8001f46:	3304      	adds	r3, #4
 8001f48:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3307      	adds	r3, #7
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	061a      	lsls	r2, r3, #24
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3306      	adds	r3, #6
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	041b      	lsls	r3, r3, #16
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3305      	adds	r3, #5
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	021b      	lsls	r3, r3, #8
 8001f64:	4313      	orrs	r3, r2
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	3204      	adds	r2, #4
 8001f6a:	7812      	ldrb	r2, [r2, #0]
 8001f6c:	4610      	mov	r0, r2
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	6811      	ldr	r1, [r2, #0]
 8001f72:	ea43 0200 	orr.w	r2, r3, r0
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	011b      	lsls	r3, r3, #4
 8001f7a:	440b      	add	r3, r1
 8001f7c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001f80:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3303      	adds	r3, #3
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	061a      	lsls	r2, r3, #24
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3302      	adds	r3, #2
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	041b      	lsls	r3, r3, #16
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3301      	adds	r3, #1
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	021b      	lsls	r3, r3, #8
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	7812      	ldrb	r2, [r2, #0]
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	6811      	ldr	r1, [r2, #0]
 8001fa8:	ea43 0200 	orr.w	r2, r3, r0
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	011b      	lsls	r3, r3, #4
 8001fb0:	440b      	add	r3, r1
 8001fb2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001fb6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	3318      	adds	r3, #24
 8001fc0:	011b      	lsls	r3, r3, #4
 8001fc2:	4413      	add	r3, r2
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	6811      	ldr	r1, [r2, #0]
 8001fca:	f043 0201 	orr.w	r2, r3, #1
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	3318      	adds	r3, #24
 8001fd2:	011b      	lsls	r3, r3, #4
 8001fd4:	440b      	add	r3, r1
 8001fd6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	e00e      	b.n	8001ffa <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e006      	b.n	8001ffa <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
  }
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3724      	adds	r7, #36	; 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr

08002004 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08a      	sub	sp, #40	; 0x28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800200c:	2300      	movs	r3, #0
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d07c      	beq.n	8002144 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	d023      	beq.n	800209c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2201      	movs	r2, #1
 800205a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f983 	bl	8002372 <HAL_CAN_TxMailbox0CompleteCallback>
 800206c:	e016      	b.n	800209c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b00      	cmp	r3, #0
 8002076:	d004      	beq.n	8002082 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
 8002080:	e00c      	b.n	800209c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	f003 0308 	and.w	r3, r3, #8
 8002088:	2b00      	cmp	r3, #0
 800208a:	d004      	beq.n	8002096 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
 8002094:	e002      	b.n	800209c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f986 	bl	80023a8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d024      	beq.n	80020f0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f962 	bl	8002384 <HAL_CAN_TxMailbox1CompleteCallback>
 80020c0:	e016      	b.n	80020f0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d004      	beq.n	80020d6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
 80020d4:	e00c      	b.n	80020f0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d004      	beq.n	80020ea <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
 80020e8:	e002      	b.n	80020f0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f965 	bl	80023ba <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d024      	beq.n	8002144 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002102:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f941 	bl	8002396 <HAL_CAN_TxMailbox2CompleteCallback>
 8002114:	e016      	b.n	8002144 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d004      	beq.n	800212a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
 8002128:	e00c      	b.n	8002144 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d004      	beq.n	800213e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
 800213c:	e002      	b.n	8002144 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f944 	bl	80023cc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00c      	beq.n	8002168 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f003 0310 	and.w	r3, r3, #16
 8002154:	2b00      	cmp	r3, #0
 8002156:	d007      	beq.n	8002168 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800215e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2210      	movs	r2, #16
 8002166:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002168:	6a3b      	ldr	r3, [r7, #32]
 800216a:	f003 0304 	and.w	r3, r3, #4
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00b      	beq.n	800218a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	d006      	beq.n	800218a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2208      	movs	r2, #8
 8002182:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f933 	bl	80023f0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d009      	beq.n	80021a8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d002      	beq.n	80021a8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f91b 	bl	80023de <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00c      	beq.n	80021cc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	f003 0310 	and.w	r3, r3, #16
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d007      	beq.n	80021cc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2210      	movs	r2, #16
 80021ca:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	f003 0320 	and.w	r3, r3, #32
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00b      	beq.n	80021ee <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d006      	beq.n	80021ee <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2208      	movs	r2, #8
 80021e6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 f913 	bl	8002414 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80021ee:	6a3b      	ldr	r3, [r7, #32]
 80021f0:	f003 0310 	and.w	r3, r3, #16
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d009      	beq.n	800220c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f8fb 	bl	8002402 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00b      	beq.n	800222e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	f003 0310 	and.w	r3, r3, #16
 800221c:	2b00      	cmp	r3, #0
 800221e:	d006      	beq.n	800222e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2210      	movs	r2, #16
 8002226:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f8fc 	bl	8002426 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00b      	beq.n	8002250 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f003 0308 	and.w	r3, r3, #8
 800223e:	2b00      	cmp	r3, #0
 8002240:	d006      	beq.n	8002250 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2208      	movs	r2, #8
 8002248:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f8f4 	bl	8002438 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002250:	6a3b      	ldr	r3, [r7, #32]
 8002252:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d07b      	beq.n	8002352 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d072      	beq.n	800234a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002264:	6a3b      	ldr	r3, [r7, #32]
 8002266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226a:	2b00      	cmp	r3, #0
 800226c:	d008      	beq.n	8002280 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002280:	6a3b      	ldr	r3, [r7, #32]
 8002282:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002286:	2b00      	cmp	r3, #0
 8002288:	d008      	beq.n	800229c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	f043 0302 	orr.w	r3, r3, #2
 800229a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d008      	beq.n	80022b8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	f043 0304 	orr.w	r3, r3, #4
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d043      	beq.n	800234a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d03e      	beq.n	800234a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022d2:	2b60      	cmp	r3, #96	; 0x60
 80022d4:	d02b      	beq.n	800232e <HAL_CAN_IRQHandler+0x32a>
 80022d6:	2b60      	cmp	r3, #96	; 0x60
 80022d8:	d82e      	bhi.n	8002338 <HAL_CAN_IRQHandler+0x334>
 80022da:	2b50      	cmp	r3, #80	; 0x50
 80022dc:	d022      	beq.n	8002324 <HAL_CAN_IRQHandler+0x320>
 80022de:	2b50      	cmp	r3, #80	; 0x50
 80022e0:	d82a      	bhi.n	8002338 <HAL_CAN_IRQHandler+0x334>
 80022e2:	2b40      	cmp	r3, #64	; 0x40
 80022e4:	d019      	beq.n	800231a <HAL_CAN_IRQHandler+0x316>
 80022e6:	2b40      	cmp	r3, #64	; 0x40
 80022e8:	d826      	bhi.n	8002338 <HAL_CAN_IRQHandler+0x334>
 80022ea:	2b30      	cmp	r3, #48	; 0x30
 80022ec:	d010      	beq.n	8002310 <HAL_CAN_IRQHandler+0x30c>
 80022ee:	2b30      	cmp	r3, #48	; 0x30
 80022f0:	d822      	bhi.n	8002338 <HAL_CAN_IRQHandler+0x334>
 80022f2:	2b10      	cmp	r3, #16
 80022f4:	d002      	beq.n	80022fc <HAL_CAN_IRQHandler+0x2f8>
 80022f6:	2b20      	cmp	r3, #32
 80022f8:	d005      	beq.n	8002306 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80022fa:	e01d      	b.n	8002338 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	f043 0308 	orr.w	r3, r3, #8
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002304:	e019      	b.n	800233a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	f043 0310 	orr.w	r3, r3, #16
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800230e:	e014      	b.n	800233a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	f043 0320 	orr.w	r3, r3, #32
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002318:	e00f      	b.n	800233a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002322:	e00a      	b.n	800233a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800232c:	e005      	b.n	800233a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002336:	e000      	b.n	800233a <HAL_CAN_IRQHandler+0x336>
            break;
 8002338:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	699a      	ldr	r2, [r3, #24]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002348:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2204      	movs	r2, #4
 8002350:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	2b00      	cmp	r3, #0
 8002356:	d008      	beq.n	800236a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 f870 	bl	800244a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800236a:	bf00      	nop
 800236c:	3728      	adds	r7, #40	; 0x28
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr

08002384 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr

08002396 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr

080023a8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr

080023ba <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr

080023cc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr

080023de <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr

080023f0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr

08002402 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr

08002426 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr

0800244a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800246c:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <__NVIC_SetPriorityGrouping+0x44>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002478:	4013      	ands	r3, r2
 800247a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002484:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800248c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800248e:	4a04      	ldr	r2, [pc, #16]	; (80024a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	60d3      	str	r3, [r2, #12]
}
 8002494:	bf00      	nop
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024a8:	4b04      	ldr	r3, [pc, #16]	; (80024bc <__NVIC_GetPriorityGrouping+0x18>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	0a1b      	lsrs	r3, r3, #8
 80024ae:	f003 0307 	and.w	r3, r3, #7
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	db0b      	blt.n	80024ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	f003 021f 	and.w	r2, r3, #31
 80024d8:	4906      	ldr	r1, [pc, #24]	; (80024f4 <__NVIC_EnableIRQ+0x34>)
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	095b      	lsrs	r3, r3, #5
 80024e0:	2001      	movs	r0, #1
 80024e2:	fa00 f202 	lsl.w	r2, r0, r2
 80024e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr
 80024f4:	e000e100 	.word	0xe000e100

080024f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	6039      	str	r1, [r7, #0]
 8002502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002508:	2b00      	cmp	r3, #0
 800250a:	db0a      	blt.n	8002522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	b2da      	uxtb	r2, r3
 8002510:	490c      	ldr	r1, [pc, #48]	; (8002544 <__NVIC_SetPriority+0x4c>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	0112      	lsls	r2, r2, #4
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	440b      	add	r3, r1
 800251c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002520:	e00a      	b.n	8002538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	b2da      	uxtb	r2, r3
 8002526:	4908      	ldr	r1, [pc, #32]	; (8002548 <__NVIC_SetPriority+0x50>)
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	3b04      	subs	r3, #4
 8002530:	0112      	lsls	r2, r2, #4
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	440b      	add	r3, r1
 8002536:	761a      	strb	r2, [r3, #24]
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	e000e100 	.word	0xe000e100
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800254c:	b480      	push	{r7}
 800254e:	b089      	sub	sp, #36	; 0x24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f1c3 0307 	rsb	r3, r3, #7
 8002566:	2b04      	cmp	r3, #4
 8002568:	bf28      	it	cs
 800256a:	2304      	movcs	r3, #4
 800256c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3304      	adds	r3, #4
 8002572:	2b06      	cmp	r3, #6
 8002574:	d902      	bls.n	800257c <NVIC_EncodePriority+0x30>
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3b03      	subs	r3, #3
 800257a:	e000      	b.n	800257e <NVIC_EncodePriority+0x32>
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002580:	f04f 32ff 	mov.w	r2, #4294967295
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43da      	mvns	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	401a      	ands	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002594:	f04f 31ff 	mov.w	r1, #4294967295
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	fa01 f303 	lsl.w	r3, r1, r3
 800259e:	43d9      	mvns	r1, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a4:	4313      	orrs	r3, r2
         );
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3724      	adds	r7, #36	; 0x24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr

080025b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025c0:	d301      	bcc.n	80025c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025c2:	2301      	movs	r3, #1
 80025c4:	e00f      	b.n	80025e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025c6:	4a0a      	ldr	r2, [pc, #40]	; (80025f0 <SysTick_Config+0x40>)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ce:	210f      	movs	r1, #15
 80025d0:	f04f 30ff 	mov.w	r0, #4294967295
 80025d4:	f7ff ff90 	bl	80024f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025d8:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <SysTick_Config+0x40>)
 80025da:	2200      	movs	r2, #0
 80025dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025de:	4b04      	ldr	r3, [pc, #16]	; (80025f0 <SysTick_Config+0x40>)
 80025e0:	2207      	movs	r2, #7
 80025e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	e000e010 	.word	0xe000e010

080025f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff ff2d 	bl	800245c <__NVIC_SetPriorityGrouping>
}
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800260a:	b580      	push	{r7, lr}
 800260c:	b086      	sub	sp, #24
 800260e:	af00      	add	r7, sp, #0
 8002610:	4603      	mov	r3, r0
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	607a      	str	r2, [r7, #4]
 8002616:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800261c:	f7ff ff42 	bl	80024a4 <__NVIC_GetPriorityGrouping>
 8002620:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	68b9      	ldr	r1, [r7, #8]
 8002626:	6978      	ldr	r0, [r7, #20]
 8002628:	f7ff ff90 	bl	800254c <NVIC_EncodePriority>
 800262c:	4602      	mov	r2, r0
 800262e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002632:	4611      	mov	r1, r2
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff ff5f 	bl	80024f8 <__NVIC_SetPriority>
}
 800263a:	bf00      	nop
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0
 8002648:	4603      	mov	r3, r0
 800264a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800264c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff ff35 	bl	80024c0 <__NVIC_EnableIRQ>
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff ffa2 	bl	80025b0 <SysTick_Config>
 800266c:	4603      	mov	r3, r0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
	...

08002678 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002678:	b480      	push	{r7}
 800267a:	b08b      	sub	sp, #44	; 0x2c
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002682:	2300      	movs	r3, #0
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002686:	2300      	movs	r3, #0
 8002688:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800268a:	e169      	b.n	8002960 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800268c:	2201      	movs	r2, #1
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	69fa      	ldr	r2, [r7, #28]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	f040 8158 	bne.w	800295a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	4a9a      	ldr	r2, [pc, #616]	; (8002918 <HAL_GPIO_Init+0x2a0>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d05e      	beq.n	8002772 <HAL_GPIO_Init+0xfa>
 80026b4:	4a98      	ldr	r2, [pc, #608]	; (8002918 <HAL_GPIO_Init+0x2a0>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d875      	bhi.n	80027a6 <HAL_GPIO_Init+0x12e>
 80026ba:	4a98      	ldr	r2, [pc, #608]	; (800291c <HAL_GPIO_Init+0x2a4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d058      	beq.n	8002772 <HAL_GPIO_Init+0xfa>
 80026c0:	4a96      	ldr	r2, [pc, #600]	; (800291c <HAL_GPIO_Init+0x2a4>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d86f      	bhi.n	80027a6 <HAL_GPIO_Init+0x12e>
 80026c6:	4a96      	ldr	r2, [pc, #600]	; (8002920 <HAL_GPIO_Init+0x2a8>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d052      	beq.n	8002772 <HAL_GPIO_Init+0xfa>
 80026cc:	4a94      	ldr	r2, [pc, #592]	; (8002920 <HAL_GPIO_Init+0x2a8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d869      	bhi.n	80027a6 <HAL_GPIO_Init+0x12e>
 80026d2:	4a94      	ldr	r2, [pc, #592]	; (8002924 <HAL_GPIO_Init+0x2ac>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d04c      	beq.n	8002772 <HAL_GPIO_Init+0xfa>
 80026d8:	4a92      	ldr	r2, [pc, #584]	; (8002924 <HAL_GPIO_Init+0x2ac>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d863      	bhi.n	80027a6 <HAL_GPIO_Init+0x12e>
 80026de:	4a92      	ldr	r2, [pc, #584]	; (8002928 <HAL_GPIO_Init+0x2b0>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d046      	beq.n	8002772 <HAL_GPIO_Init+0xfa>
 80026e4:	4a90      	ldr	r2, [pc, #576]	; (8002928 <HAL_GPIO_Init+0x2b0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d85d      	bhi.n	80027a6 <HAL_GPIO_Init+0x12e>
 80026ea:	2b12      	cmp	r3, #18
 80026ec:	d82a      	bhi.n	8002744 <HAL_GPIO_Init+0xcc>
 80026ee:	2b12      	cmp	r3, #18
 80026f0:	d859      	bhi.n	80027a6 <HAL_GPIO_Init+0x12e>
 80026f2:	a201      	add	r2, pc, #4	; (adr r2, 80026f8 <HAL_GPIO_Init+0x80>)
 80026f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f8:	08002773 	.word	0x08002773
 80026fc:	0800274d 	.word	0x0800274d
 8002700:	0800275f 	.word	0x0800275f
 8002704:	080027a1 	.word	0x080027a1
 8002708:	080027a7 	.word	0x080027a7
 800270c:	080027a7 	.word	0x080027a7
 8002710:	080027a7 	.word	0x080027a7
 8002714:	080027a7 	.word	0x080027a7
 8002718:	080027a7 	.word	0x080027a7
 800271c:	080027a7 	.word	0x080027a7
 8002720:	080027a7 	.word	0x080027a7
 8002724:	080027a7 	.word	0x080027a7
 8002728:	080027a7 	.word	0x080027a7
 800272c:	080027a7 	.word	0x080027a7
 8002730:	080027a7 	.word	0x080027a7
 8002734:	080027a7 	.word	0x080027a7
 8002738:	080027a7 	.word	0x080027a7
 800273c:	08002755 	.word	0x08002755
 8002740:	08002769 	.word	0x08002769
 8002744:	4a79      	ldr	r2, [pc, #484]	; (800292c <HAL_GPIO_Init+0x2b4>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d013      	beq.n	8002772 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800274a:	e02c      	b.n	80027a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	623b      	str	r3, [r7, #32]
          break;
 8002752:	e029      	b.n	80027a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	3304      	adds	r3, #4
 800275a:	623b      	str	r3, [r7, #32]
          break;
 800275c:	e024      	b.n	80027a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	3308      	adds	r3, #8
 8002764:	623b      	str	r3, [r7, #32]
          break;
 8002766:	e01f      	b.n	80027a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	330c      	adds	r3, #12
 800276e:	623b      	str	r3, [r7, #32]
          break;
 8002770:	e01a      	b.n	80027a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d102      	bne.n	8002780 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800277a:	2304      	movs	r3, #4
 800277c:	623b      	str	r3, [r7, #32]
          break;
 800277e:	e013      	b.n	80027a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d105      	bne.n	8002794 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002788:	2308      	movs	r3, #8
 800278a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69fa      	ldr	r2, [r7, #28]
 8002790:	611a      	str	r2, [r3, #16]
          break;
 8002792:	e009      	b.n	80027a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002794:	2308      	movs	r3, #8
 8002796:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69fa      	ldr	r2, [r7, #28]
 800279c:	615a      	str	r2, [r3, #20]
          break;
 800279e:	e003      	b.n	80027a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027a0:	2300      	movs	r3, #0
 80027a2:	623b      	str	r3, [r7, #32]
          break;
 80027a4:	e000      	b.n	80027a8 <HAL_GPIO_Init+0x130>
          break;
 80027a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	2bff      	cmp	r3, #255	; 0xff
 80027ac:	d801      	bhi.n	80027b2 <HAL_GPIO_Init+0x13a>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	e001      	b.n	80027b6 <HAL_GPIO_Init+0x13e>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3304      	adds	r3, #4
 80027b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	2bff      	cmp	r3, #255	; 0xff
 80027bc:	d802      	bhi.n	80027c4 <HAL_GPIO_Init+0x14c>
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	e002      	b.n	80027ca <HAL_GPIO_Init+0x152>
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	3b08      	subs	r3, #8
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	210f      	movs	r1, #15
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	fa01 f303 	lsl.w	r3, r1, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	401a      	ands	r2, r3
 80027dc:	6a39      	ldr	r1, [r7, #32]
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	fa01 f303 	lsl.w	r3, r1, r3
 80027e4:	431a      	orrs	r2, r3
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 80b1 	beq.w	800295a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027f8:	4b4d      	ldr	r3, [pc, #308]	; (8002930 <HAL_GPIO_Init+0x2b8>)
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	4a4c      	ldr	r2, [pc, #304]	; (8002930 <HAL_GPIO_Init+0x2b8>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	6193      	str	r3, [r2, #24]
 8002804:	4b4a      	ldr	r3, [pc, #296]	; (8002930 <HAL_GPIO_Init+0x2b8>)
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	60bb      	str	r3, [r7, #8]
 800280e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002810:	4a48      	ldr	r2, [pc, #288]	; (8002934 <HAL_GPIO_Init+0x2bc>)
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	089b      	lsrs	r3, r3, #2
 8002816:	3302      	adds	r3, #2
 8002818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800281c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	220f      	movs	r2, #15
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	4013      	ands	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a40      	ldr	r2, [pc, #256]	; (8002938 <HAL_GPIO_Init+0x2c0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d013      	beq.n	8002864 <HAL_GPIO_Init+0x1ec>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a3f      	ldr	r2, [pc, #252]	; (800293c <HAL_GPIO_Init+0x2c4>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d00d      	beq.n	8002860 <HAL_GPIO_Init+0x1e8>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a3e      	ldr	r2, [pc, #248]	; (8002940 <HAL_GPIO_Init+0x2c8>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d007      	beq.n	800285c <HAL_GPIO_Init+0x1e4>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a3d      	ldr	r2, [pc, #244]	; (8002944 <HAL_GPIO_Init+0x2cc>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d101      	bne.n	8002858 <HAL_GPIO_Init+0x1e0>
 8002854:	2303      	movs	r3, #3
 8002856:	e006      	b.n	8002866 <HAL_GPIO_Init+0x1ee>
 8002858:	2304      	movs	r3, #4
 800285a:	e004      	b.n	8002866 <HAL_GPIO_Init+0x1ee>
 800285c:	2302      	movs	r3, #2
 800285e:	e002      	b.n	8002866 <HAL_GPIO_Init+0x1ee>
 8002860:	2301      	movs	r3, #1
 8002862:	e000      	b.n	8002866 <HAL_GPIO_Init+0x1ee>
 8002864:	2300      	movs	r3, #0
 8002866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002868:	f002 0203 	and.w	r2, r2, #3
 800286c:	0092      	lsls	r2, r2, #2
 800286e:	4093      	lsls	r3, r2
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	4313      	orrs	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002876:	492f      	ldr	r1, [pc, #188]	; (8002934 <HAL_GPIO_Init+0x2bc>)
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	089b      	lsrs	r3, r3, #2
 800287c:	3302      	adds	r3, #2
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d006      	beq.n	800289e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002890:	4b2d      	ldr	r3, [pc, #180]	; (8002948 <HAL_GPIO_Init+0x2d0>)
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	492c      	ldr	r1, [pc, #176]	; (8002948 <HAL_GPIO_Init+0x2d0>)
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	4313      	orrs	r3, r2
 800289a:	608b      	str	r3, [r1, #8]
 800289c:	e006      	b.n	80028ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800289e:	4b2a      	ldr	r3, [pc, #168]	; (8002948 <HAL_GPIO_Init+0x2d0>)
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	43db      	mvns	r3, r3
 80028a6:	4928      	ldr	r1, [pc, #160]	; (8002948 <HAL_GPIO_Init+0x2d0>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d006      	beq.n	80028c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028b8:	4b23      	ldr	r3, [pc, #140]	; (8002948 <HAL_GPIO_Init+0x2d0>)
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	4922      	ldr	r1, [pc, #136]	; (8002948 <HAL_GPIO_Init+0x2d0>)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60cb      	str	r3, [r1, #12]
 80028c4:	e006      	b.n	80028d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028c6:	4b20      	ldr	r3, [pc, #128]	; (8002948 <HAL_GPIO_Init+0x2d0>)
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	43db      	mvns	r3, r3
 80028ce:	491e      	ldr	r1, [pc, #120]	; (8002948 <HAL_GPIO_Init+0x2d0>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d006      	beq.n	80028ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028e0:	4b19      	ldr	r3, [pc, #100]	; (8002948 <HAL_GPIO_Init+0x2d0>)
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	4918      	ldr	r1, [pc, #96]	; (8002948 <HAL_GPIO_Init+0x2d0>)
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	604b      	str	r3, [r1, #4]
 80028ec:	e006      	b.n	80028fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028ee:	4b16      	ldr	r3, [pc, #88]	; (8002948 <HAL_GPIO_Init+0x2d0>)
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	43db      	mvns	r3, r3
 80028f6:	4914      	ldr	r1, [pc, #80]	; (8002948 <HAL_GPIO_Init+0x2d0>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d021      	beq.n	800294c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002908:	4b0f      	ldr	r3, [pc, #60]	; (8002948 <HAL_GPIO_Init+0x2d0>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	490e      	ldr	r1, [pc, #56]	; (8002948 <HAL_GPIO_Init+0x2d0>)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	4313      	orrs	r3, r2
 8002912:	600b      	str	r3, [r1, #0]
 8002914:	e021      	b.n	800295a <HAL_GPIO_Init+0x2e2>
 8002916:	bf00      	nop
 8002918:	10320000 	.word	0x10320000
 800291c:	10310000 	.word	0x10310000
 8002920:	10220000 	.word	0x10220000
 8002924:	10210000 	.word	0x10210000
 8002928:	10120000 	.word	0x10120000
 800292c:	10110000 	.word	0x10110000
 8002930:	40021000 	.word	0x40021000
 8002934:	40010000 	.word	0x40010000
 8002938:	40010800 	.word	0x40010800
 800293c:	40010c00 	.word	0x40010c00
 8002940:	40011000 	.word	0x40011000
 8002944:	40011400 	.word	0x40011400
 8002948:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <HAL_GPIO_Init+0x304>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	43db      	mvns	r3, r3
 8002954:	4909      	ldr	r1, [pc, #36]	; (800297c <HAL_GPIO_Init+0x304>)
 8002956:	4013      	ands	r3, r2
 8002958:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	3301      	adds	r3, #1
 800295e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	fa22 f303 	lsr.w	r3, r2, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	f47f ae8e 	bne.w	800268c <HAL_GPIO_Init+0x14>
  }
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	372c      	adds	r7, #44	; 0x2c
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr
 800297c:	40010400 	.word	0x40010400

08002980 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	887b      	ldrh	r3, [r7, #2]
 8002992:	4013      	ands	r3, r2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d002      	beq.n	800299e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002998:	2301      	movs	r3, #1
 800299a:	73fb      	strb	r3, [r7, #15]
 800299c:	e001      	b.n	80029a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800299e:	2300      	movs	r3, #0
 80029a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr

080029ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	460b      	mov	r3, r1
 80029b8:	807b      	strh	r3, [r7, #2]
 80029ba:	4613      	mov	r3, r2
 80029bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029be:	787b      	ldrb	r3, [r7, #1]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029c4:	887a      	ldrh	r2, [r7, #2]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029ca:	e003      	b.n	80029d4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029cc:	887b      	ldrh	r3, [r7, #2]
 80029ce:	041a      	lsls	r2, r3, #16
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	611a      	str	r2, [r3, #16]
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr

080029de <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029de:	b480      	push	{r7}
 80029e0:	b085      	sub	sp, #20
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	460b      	mov	r3, r1
 80029e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029f0:	887a      	ldrh	r2, [r7, #2]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4013      	ands	r3, r2
 80029f6:	041a      	lsls	r2, r3, #16
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	43d9      	mvns	r1, r3
 80029fc:	887b      	ldrh	r3, [r7, #2]
 80029fe:	400b      	ands	r3, r1
 8002a00:	431a      	orrs	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	611a      	str	r2, [r3, #16]
}
 8002a06:	bf00      	nop
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr

08002a10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a1a:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a1c:	695a      	ldr	r2, [r3, #20]
 8002a1e:	88fb      	ldrh	r3, [r7, #6]
 8002a20:	4013      	ands	r3, r2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d006      	beq.n	8002a34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a26:	4a05      	ldr	r2, [pc, #20]	; (8002a3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a28:	88fb      	ldrh	r3, [r7, #6]
 8002a2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a2c:	88fb      	ldrh	r3, [r7, #6]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fd fbf4 	bl	800021c <HAL_GPIO_EXTI_Callback>
  }
}
 8002a34:	bf00      	nop
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40010400 	.word	0x40010400

08002a40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e26c      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 8087 	beq.w	8002b6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a60:	4b92      	ldr	r3, [pc, #584]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 030c 	and.w	r3, r3, #12
 8002a68:	2b04      	cmp	r3, #4
 8002a6a:	d00c      	beq.n	8002a86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a6c:	4b8f      	ldr	r3, [pc, #572]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 030c 	and.w	r3, r3, #12
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d112      	bne.n	8002a9e <HAL_RCC_OscConfig+0x5e>
 8002a78:	4b8c      	ldr	r3, [pc, #560]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a84:	d10b      	bne.n	8002a9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a86:	4b89      	ldr	r3, [pc, #548]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d06c      	beq.n	8002b6c <HAL_RCC_OscConfig+0x12c>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d168      	bne.n	8002b6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e246      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa6:	d106      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x76>
 8002aa8:	4b80      	ldr	r3, [pc, #512]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a7f      	ldr	r2, [pc, #508]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab2:	6013      	str	r3, [r2, #0]
 8002ab4:	e02e      	b.n	8002b14 <HAL_RCC_OscConfig+0xd4>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10c      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x98>
 8002abe:	4b7b      	ldr	r3, [pc, #492]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a7a      	ldr	r2, [pc, #488]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	4b78      	ldr	r3, [pc, #480]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a77      	ldr	r2, [pc, #476]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	e01d      	b.n	8002b14 <HAL_RCC_OscConfig+0xd4>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ae0:	d10c      	bne.n	8002afc <HAL_RCC_OscConfig+0xbc>
 8002ae2:	4b72      	ldr	r3, [pc, #456]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a71      	ldr	r2, [pc, #452]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	4b6f      	ldr	r3, [pc, #444]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a6e      	ldr	r2, [pc, #440]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	e00b      	b.n	8002b14 <HAL_RCC_OscConfig+0xd4>
 8002afc:	4b6b      	ldr	r3, [pc, #428]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a6a      	ldr	r2, [pc, #424]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b06:	6013      	str	r3, [r2, #0]
 8002b08:	4b68      	ldr	r3, [pc, #416]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a67      	ldr	r2, [pc, #412]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d013      	beq.n	8002b44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1c:	f7fe fb16 	bl	800114c <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b24:	f7fe fb12 	bl	800114c <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b64      	cmp	r3, #100	; 0x64
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e1fa      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b36:	4b5d      	ldr	r3, [pc, #372]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0xe4>
 8002b42:	e014      	b.n	8002b6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b44:	f7fe fb02 	bl	800114c <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b4c:	f7fe fafe 	bl	800114c <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b64      	cmp	r3, #100	; 0x64
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e1e6      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b5e:	4b53      	ldr	r3, [pc, #332]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x10c>
 8002b6a:	e000      	b.n	8002b6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d063      	beq.n	8002c42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b7a:	4b4c      	ldr	r3, [pc, #304]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00b      	beq.n	8002b9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b86:	4b49      	ldr	r3, [pc, #292]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	d11c      	bne.n	8002bcc <HAL_RCC_OscConfig+0x18c>
 8002b92:	4b46      	ldr	r3, [pc, #280]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d116      	bne.n	8002bcc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9e:	4b43      	ldr	r3, [pc, #268]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d005      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x176>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d001      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e1ba      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb6:	4b3d      	ldr	r3, [pc, #244]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	4939      	ldr	r1, [pc, #228]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bca:	e03a      	b.n	8002c42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d020      	beq.n	8002c16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bd4:	4b36      	ldr	r3, [pc, #216]	; (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bda:	f7fe fab7 	bl	800114c <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be0:	e008      	b.n	8002bf4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be2:	f7fe fab3 	bl	800114c <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e19b      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf4:	4b2d      	ldr	r3, [pc, #180]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0f0      	beq.n	8002be2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c00:	4b2a      	ldr	r3, [pc, #168]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	4927      	ldr	r1, [pc, #156]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	600b      	str	r3, [r1, #0]
 8002c14:	e015      	b.n	8002c42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c16:	4b26      	ldr	r3, [pc, #152]	; (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1c:	f7fe fa96 	bl	800114c <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c24:	f7fe fa92 	bl	800114c <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e17a      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c36:	4b1d      	ldr	r3, [pc, #116]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f0      	bne.n	8002c24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d03a      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d019      	beq.n	8002c8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c56:	4b17      	ldr	r3, [pc, #92]	; (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5c:	f7fe fa76 	bl	800114c <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c64:	f7fe fa72 	bl	800114c <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e15a      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c76:	4b0d      	ldr	r3, [pc, #52]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0f0      	beq.n	8002c64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c82:	2001      	movs	r0, #1
 8002c84:	f000 fab8 	bl	80031f8 <RCC_Delay>
 8002c88:	e01c      	b.n	8002cc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c8a:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c90:	f7fe fa5c 	bl	800114c <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c96:	e00f      	b.n	8002cb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c98:	f7fe fa58 	bl	800114c <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d908      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e140      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>
 8002caa:	bf00      	nop
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	42420000 	.word	0x42420000
 8002cb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb8:	4b9e      	ldr	r3, [pc, #632]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1e9      	bne.n	8002c98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 80a6 	beq.w	8002e1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cd6:	4b97      	ldr	r3, [pc, #604]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10d      	bne.n	8002cfe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce2:	4b94      	ldr	r3, [pc, #592]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	4a93      	ldr	r2, [pc, #588]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cec:	61d3      	str	r3, [r2, #28]
 8002cee:	4b91      	ldr	r3, [pc, #580]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfe:	4b8e      	ldr	r3, [pc, #568]	; (8002f38 <HAL_RCC_OscConfig+0x4f8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d118      	bne.n	8002d3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d0a:	4b8b      	ldr	r3, [pc, #556]	; (8002f38 <HAL_RCC_OscConfig+0x4f8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a8a      	ldr	r2, [pc, #552]	; (8002f38 <HAL_RCC_OscConfig+0x4f8>)
 8002d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d16:	f7fe fa19 	bl	800114c <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d1e:	f7fe fa15 	bl	800114c <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b64      	cmp	r3, #100	; 0x64
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e0fd      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d30:	4b81      	ldr	r3, [pc, #516]	; (8002f38 <HAL_RCC_OscConfig+0x4f8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d106      	bne.n	8002d52 <HAL_RCC_OscConfig+0x312>
 8002d44:	4b7b      	ldr	r3, [pc, #492]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	4a7a      	ldr	r2, [pc, #488]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002d4a:	f043 0301 	orr.w	r3, r3, #1
 8002d4e:	6213      	str	r3, [r2, #32]
 8002d50:	e02d      	b.n	8002dae <HAL_RCC_OscConfig+0x36e>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10c      	bne.n	8002d74 <HAL_RCC_OscConfig+0x334>
 8002d5a:	4b76      	ldr	r3, [pc, #472]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	4a75      	ldr	r2, [pc, #468]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002d60:	f023 0301 	bic.w	r3, r3, #1
 8002d64:	6213      	str	r3, [r2, #32]
 8002d66:	4b73      	ldr	r3, [pc, #460]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	4a72      	ldr	r2, [pc, #456]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002d6c:	f023 0304 	bic.w	r3, r3, #4
 8002d70:	6213      	str	r3, [r2, #32]
 8002d72:	e01c      	b.n	8002dae <HAL_RCC_OscConfig+0x36e>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	2b05      	cmp	r3, #5
 8002d7a:	d10c      	bne.n	8002d96 <HAL_RCC_OscConfig+0x356>
 8002d7c:	4b6d      	ldr	r3, [pc, #436]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	4a6c      	ldr	r2, [pc, #432]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002d82:	f043 0304 	orr.w	r3, r3, #4
 8002d86:	6213      	str	r3, [r2, #32]
 8002d88:	4b6a      	ldr	r3, [pc, #424]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	4a69      	ldr	r2, [pc, #420]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	6213      	str	r3, [r2, #32]
 8002d94:	e00b      	b.n	8002dae <HAL_RCC_OscConfig+0x36e>
 8002d96:	4b67      	ldr	r3, [pc, #412]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	4a66      	ldr	r2, [pc, #408]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002d9c:	f023 0301 	bic.w	r3, r3, #1
 8002da0:	6213      	str	r3, [r2, #32]
 8002da2:	4b64      	ldr	r3, [pc, #400]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	4a63      	ldr	r2, [pc, #396]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002da8:	f023 0304 	bic.w	r3, r3, #4
 8002dac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d015      	beq.n	8002de2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db6:	f7fe f9c9 	bl	800114c <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dbc:	e00a      	b.n	8002dd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dbe:	f7fe f9c5 	bl	800114c <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e0ab      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd4:	4b57      	ldr	r3, [pc, #348]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0ee      	beq.n	8002dbe <HAL_RCC_OscConfig+0x37e>
 8002de0:	e014      	b.n	8002e0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de2:	f7fe f9b3 	bl	800114c <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de8:	e00a      	b.n	8002e00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dea:	f7fe f9af 	bl	800114c <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e095      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e00:	4b4c      	ldr	r3, [pc, #304]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1ee      	bne.n	8002dea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e0c:	7dfb      	ldrb	r3, [r7, #23]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d105      	bne.n	8002e1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e12:	4b48      	ldr	r3, [pc, #288]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	4a47      	ldr	r2, [pc, #284]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 8081 	beq.w	8002f2a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e28:	4b42      	ldr	r3, [pc, #264]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 030c 	and.w	r3, r3, #12
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d061      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d146      	bne.n	8002eca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3c:	4b3f      	ldr	r3, [pc, #252]	; (8002f3c <HAL_RCC_OscConfig+0x4fc>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e42:	f7fe f983 	bl	800114c <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e4a:	f7fe f97f 	bl	800114c <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e067      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e5c:	4b35      	ldr	r3, [pc, #212]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1f0      	bne.n	8002e4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e70:	d108      	bne.n	8002e84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e72:	4b30      	ldr	r3, [pc, #192]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	492d      	ldr	r1, [pc, #180]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e84:	4b2b      	ldr	r3, [pc, #172]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a19      	ldr	r1, [r3, #32]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	430b      	orrs	r3, r1
 8002e96:	4927      	ldr	r1, [pc, #156]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e9c:	4b27      	ldr	r3, [pc, #156]	; (8002f3c <HAL_RCC_OscConfig+0x4fc>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea2:	f7fe f953 	bl	800114c <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eaa:	f7fe f94f 	bl	800114c <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e037      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ebc:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0f0      	beq.n	8002eaa <HAL_RCC_OscConfig+0x46a>
 8002ec8:	e02f      	b.n	8002f2a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eca:	4b1c      	ldr	r3, [pc, #112]	; (8002f3c <HAL_RCC_OscConfig+0x4fc>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed0:	f7fe f93c 	bl	800114c <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed8:	f7fe f938 	bl	800114c <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e020      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eea:	4b12      	ldr	r3, [pc, #72]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f0      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x498>
 8002ef6:	e018      	b.n	8002f2a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e013      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f04:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d106      	bne.n	8002f26 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d001      	beq.n	8002f2a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40007000 	.word	0x40007000
 8002f3c:	42420060 	.word	0x42420060

08002f40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0d0      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f54:	4b6a      	ldr	r3, [pc, #424]	; (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d910      	bls.n	8002f84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	4b67      	ldr	r3, [pc, #412]	; (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 0207 	bic.w	r2, r3, #7
 8002f6a:	4965      	ldr	r1, [pc, #404]	; (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f72:	4b63      	ldr	r3, [pc, #396]	; (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e0b8      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d020      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f9c:	4b59      	ldr	r3, [pc, #356]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	4a58      	ldr	r2, [pc, #352]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fa6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d005      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fb4:	4b53      	ldr	r3, [pc, #332]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	4a52      	ldr	r2, [pc, #328]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8002fba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002fbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc0:	4b50      	ldr	r3, [pc, #320]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	494d      	ldr	r1, [pc, #308]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d040      	beq.n	8003060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d107      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe6:	4b47      	ldr	r3, [pc, #284]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d115      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e07f      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d107      	bne.n	800300e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffe:	4b41      	ldr	r3, [pc, #260]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d109      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e073      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300e:	4b3d      	ldr	r3, [pc, #244]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e06b      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800301e:	4b39      	ldr	r3, [pc, #228]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f023 0203 	bic.w	r2, r3, #3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	4936      	ldr	r1, [pc, #216]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 800302c:	4313      	orrs	r3, r2
 800302e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003030:	f7fe f88c 	bl	800114c <HAL_GetTick>
 8003034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003036:	e00a      	b.n	800304e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003038:	f7fe f888 	bl	800114c <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f241 3288 	movw	r2, #5000	; 0x1388
 8003046:	4293      	cmp	r3, r2
 8003048:	d901      	bls.n	800304e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e053      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304e:	4b2d      	ldr	r3, [pc, #180]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f003 020c 	and.w	r2, r3, #12
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	429a      	cmp	r2, r3
 800305e:	d1eb      	bne.n	8003038 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003060:	4b27      	ldr	r3, [pc, #156]	; (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d210      	bcs.n	8003090 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306e:	4b24      	ldr	r3, [pc, #144]	; (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f023 0207 	bic.w	r2, r3, #7
 8003076:	4922      	ldr	r1, [pc, #136]	; (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	4313      	orrs	r3, r2
 800307c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800307e:	4b20      	ldr	r3, [pc, #128]	; (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d001      	beq.n	8003090 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e032      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	d008      	beq.n	80030ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800309c:	4b19      	ldr	r3, [pc, #100]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	4916      	ldr	r1, [pc, #88]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d009      	beq.n	80030ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030ba:	4b12      	ldr	r3, [pc, #72]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	490e      	ldr	r1, [pc, #56]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030ce:	f000 f821 	bl	8003114 <HAL_RCC_GetSysClockFreq>
 80030d2:	4602      	mov	r2, r0
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	091b      	lsrs	r3, r3, #4
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	490a      	ldr	r1, [pc, #40]	; (8003108 <HAL_RCC_ClockConfig+0x1c8>)
 80030e0:	5ccb      	ldrb	r3, [r1, r3]
 80030e2:	fa22 f303 	lsr.w	r3, r2, r3
 80030e6:	4a09      	ldr	r2, [pc, #36]	; (800310c <HAL_RCC_ClockConfig+0x1cc>)
 80030e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030ea:	4b09      	ldr	r3, [pc, #36]	; (8003110 <HAL_RCC_ClockConfig+0x1d0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fd ffea 	bl	80010c8 <HAL_InitTick>

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40022000 	.word	0x40022000
 8003104:	40021000 	.word	0x40021000
 8003108:	08004430 	.word	0x08004430
 800310c:	20000008 	.word	0x20000008
 8003110:	2000000c 	.word	0x2000000c

08003114 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003114:	b480      	push	{r7}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800311a:	2300      	movs	r3, #0
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	2300      	movs	r3, #0
 8003120:	60bb      	str	r3, [r7, #8]
 8003122:	2300      	movs	r3, #0
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	2300      	movs	r3, #0
 8003128:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800312a:	2300      	movs	r3, #0
 800312c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800312e:	4b1e      	ldr	r3, [pc, #120]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	2b04      	cmp	r3, #4
 800313c:	d002      	beq.n	8003144 <HAL_RCC_GetSysClockFreq+0x30>
 800313e:	2b08      	cmp	r3, #8
 8003140:	d003      	beq.n	800314a <HAL_RCC_GetSysClockFreq+0x36>
 8003142:	e027      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003144:	4b19      	ldr	r3, [pc, #100]	; (80031ac <HAL_RCC_GetSysClockFreq+0x98>)
 8003146:	613b      	str	r3, [r7, #16]
      break;
 8003148:	e027      	b.n	800319a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	0c9b      	lsrs	r3, r3, #18
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	4a17      	ldr	r2, [pc, #92]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003154:	5cd3      	ldrb	r3, [r2, r3]
 8003156:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d010      	beq.n	8003184 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003162:	4b11      	ldr	r3, [pc, #68]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	0c5b      	lsrs	r3, r3, #17
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	4a11      	ldr	r2, [pc, #68]	; (80031b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800316e:	5cd3      	ldrb	r3, [r2, r3]
 8003170:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a0d      	ldr	r2, [pc, #52]	; (80031ac <HAL_RCC_GetSysClockFreq+0x98>)
 8003176:	fb02 f203 	mul.w	r2, r2, r3
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	e004      	b.n	800318e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a0c      	ldr	r2, [pc, #48]	; (80031b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003188:	fb02 f303 	mul.w	r3, r2, r3
 800318c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	613b      	str	r3, [r7, #16]
      break;
 8003192:	e002      	b.n	800319a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003194:	4b05      	ldr	r3, [pc, #20]	; (80031ac <HAL_RCC_GetSysClockFreq+0x98>)
 8003196:	613b      	str	r3, [r7, #16]
      break;
 8003198:	bf00      	nop
    }
  }
  return sysclockfreq;
 800319a:	693b      	ldr	r3, [r7, #16]
}
 800319c:	4618      	mov	r0, r3
 800319e:	371c      	adds	r7, #28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	40021000 	.word	0x40021000
 80031ac:	007a1200 	.word	0x007a1200
 80031b0:	08004448 	.word	0x08004448
 80031b4:	08004458 	.word	0x08004458
 80031b8:	003d0900 	.word	0x003d0900

080031bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031c0:	4b02      	ldr	r3, [pc, #8]	; (80031cc <HAL_RCC_GetHCLKFreq+0x10>)
 80031c2:	681b      	ldr	r3, [r3, #0]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr
 80031cc:	20000008 	.word	0x20000008

080031d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031d4:	f7ff fff2 	bl	80031bc <HAL_RCC_GetHCLKFreq>
 80031d8:	4602      	mov	r2, r0
 80031da:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	0adb      	lsrs	r3, r3, #11
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	4903      	ldr	r1, [pc, #12]	; (80031f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031e6:	5ccb      	ldrb	r3, [r1, r3]
 80031e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40021000 	.word	0x40021000
 80031f4:	08004440 	.word	0x08004440

080031f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003200:	4b0a      	ldr	r3, [pc, #40]	; (800322c <RCC_Delay+0x34>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a0a      	ldr	r2, [pc, #40]	; (8003230 <RCC_Delay+0x38>)
 8003206:	fba2 2303 	umull	r2, r3, r2, r3
 800320a:	0a5b      	lsrs	r3, r3, #9
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	fb02 f303 	mul.w	r3, r2, r3
 8003212:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003214:	bf00      	nop
  }
  while (Delay --);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	1e5a      	subs	r2, r3, #1
 800321a:	60fa      	str	r2, [r7, #12]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1f9      	bne.n	8003214 <RCC_Delay+0x1c>
}
 8003220:	bf00      	nop
 8003222:	bf00      	nop
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr
 800322c:	20000008 	.word	0x20000008
 8003230:	10624dd3 	.word	0x10624dd3

08003234 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	2300      	movs	r3, #0
 8003242:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b00      	cmp	r3, #0
 800324e:	d07d      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003250:	2300      	movs	r3, #0
 8003252:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003254:	4b4f      	ldr	r3, [pc, #316]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10d      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003260:	4b4c      	ldr	r3, [pc, #304]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003262:	69db      	ldr	r3, [r3, #28]
 8003264:	4a4b      	ldr	r2, [pc, #300]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800326a:	61d3      	str	r3, [r2, #28]
 800326c:	4b49      	ldr	r3, [pc, #292]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003278:	2301      	movs	r3, #1
 800327a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327c:	4b46      	ldr	r3, [pc, #280]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003284:	2b00      	cmp	r3, #0
 8003286:	d118      	bne.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003288:	4b43      	ldr	r3, [pc, #268]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a42      	ldr	r2, [pc, #264]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800328e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003292:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003294:	f7fd ff5a 	bl	800114c <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329a:	e008      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800329c:	f7fd ff56 	bl	800114c <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b64      	cmp	r3, #100	; 0x64
 80032a8:	d901      	bls.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e06d      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ae:	4b3a      	ldr	r3, [pc, #232]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0f0      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032ba:	4b36      	ldr	r3, [pc, #216]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d02e      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d027      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032d8:	4b2e      	ldr	r3, [pc, #184]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032e2:	4b2e      	ldr	r3, [pc, #184]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032e4:	2201      	movs	r2, #1
 80032e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032e8:	4b2c      	ldr	r3, [pc, #176]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032ee:	4a29      	ldr	r2, [pc, #164]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d014      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fe:	f7fd ff25 	bl	800114c <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003304:	e00a      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003306:	f7fd ff21 	bl	800114c <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	f241 3288 	movw	r2, #5000	; 0x1388
 8003314:	4293      	cmp	r3, r2
 8003316:	d901      	bls.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e036      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800331c:	4b1d      	ldr	r3, [pc, #116]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0ee      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003328:	4b1a      	ldr	r3, [pc, #104]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	4917      	ldr	r1, [pc, #92]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003336:	4313      	orrs	r3, r2
 8003338:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800333a:	7dfb      	ldrb	r3, [r7, #23]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d105      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003340:	4b14      	ldr	r3, [pc, #80]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	4a13      	ldr	r2, [pc, #76]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800334a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d008      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003358:	4b0e      	ldr	r3, [pc, #56]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	490b      	ldr	r1, [pc, #44]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003366:	4313      	orrs	r3, r2
 8003368:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0310 	and.w	r3, r3, #16
 8003372:	2b00      	cmp	r3, #0
 8003374:	d008      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003376:	4b07      	ldr	r3, [pc, #28]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	4904      	ldr	r1, [pc, #16]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003384:	4313      	orrs	r3, r2
 8003386:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40021000 	.word	0x40021000
 8003398:	40007000 	.word	0x40007000
 800339c:	42420440 	.word	0x42420440

080033a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	2300      	movs	r3, #0
 80033ae:	61fb      	str	r3, [r7, #28]
 80033b0:	2300      	movs	r3, #0
 80033b2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	2300      	movs	r3, #0
 80033ba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b10      	cmp	r3, #16
 80033c0:	d00a      	beq.n	80033d8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b10      	cmp	r3, #16
 80033c6:	f200 808a 	bhi.w	80034de <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d045      	beq.n	800345c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d075      	beq.n	80034c2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80033d6:	e082      	b.n	80034de <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80033d8:	4b46      	ldr	r3, [pc, #280]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80033de:	4b45      	ldr	r3, [pc, #276]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d07b      	beq.n	80034e2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	0c9b      	lsrs	r3, r3, #18
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	4a41      	ldr	r2, [pc, #260]	; (80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80033f4:	5cd3      	ldrb	r3, [r2, r3]
 80033f6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d015      	beq.n	800342e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003402:	4b3c      	ldr	r3, [pc, #240]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	0c5b      	lsrs	r3, r3, #17
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	4a3b      	ldr	r2, [pc, #236]	; (80034fc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800340e:	5cd3      	ldrb	r3, [r2, r3]
 8003410:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00d      	beq.n	8003438 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800341c:	4a38      	ldr	r2, [pc, #224]	; (8003500 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	fbb2 f2f3 	udiv	r2, r2, r3
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	fb02 f303 	mul.w	r3, r2, r3
 800342a:	61fb      	str	r3, [r7, #28]
 800342c:	e004      	b.n	8003438 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	4a34      	ldr	r2, [pc, #208]	; (8003504 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003432:	fb02 f303 	mul.w	r3, r2, r3
 8003436:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003438:	4b2e      	ldr	r3, [pc, #184]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003440:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003444:	d102      	bne.n	800344c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	61bb      	str	r3, [r7, #24]
      break;
 800344a:	e04a      	b.n	80034e2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	4a2d      	ldr	r2, [pc, #180]	; (8003508 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003452:	fba2 2303 	umull	r2, r3, r2, r3
 8003456:	085b      	lsrs	r3, r3, #1
 8003458:	61bb      	str	r3, [r7, #24]
      break;
 800345a:	e042      	b.n	80034e2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800345c:	4b25      	ldr	r3, [pc, #148]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800346c:	d108      	bne.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003478:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800347c:	61bb      	str	r3, [r7, #24]
 800347e:	e01f      	b.n	80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800348a:	d109      	bne.n	80034a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800348c:	4b19      	ldr	r3, [pc, #100]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003498:	f649 4340 	movw	r3, #40000	; 0x9c40
 800349c:	61bb      	str	r3, [r7, #24]
 800349e:	e00f      	b.n	80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034aa:	d11c      	bne.n	80034e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80034ac:	4b11      	ldr	r3, [pc, #68]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d016      	beq.n	80034e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80034b8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80034bc:	61bb      	str	r3, [r7, #24]
      break;
 80034be:	e012      	b.n	80034e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80034c0:	e011      	b.n	80034e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80034c2:	f7ff fe85 	bl	80031d0 <HAL_RCC_GetPCLK2Freq>
 80034c6:	4602      	mov	r2, r0
 80034c8:	4b0a      	ldr	r3, [pc, #40]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	0b9b      	lsrs	r3, r3, #14
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	3301      	adds	r3, #1
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034da:	61bb      	str	r3, [r7, #24]
      break;
 80034dc:	e004      	b.n	80034e8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80034de:	bf00      	nop
 80034e0:	e002      	b.n	80034e8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80034e2:	bf00      	nop
 80034e4:	e000      	b.n	80034e8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80034e6:	bf00      	nop
    }
  }
  return (frequency);
 80034e8:	69bb      	ldr	r3, [r7, #24]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3720      	adds	r7, #32
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40021000 	.word	0x40021000
 80034f8:	0800445c 	.word	0x0800445c
 80034fc:	0800446c 	.word	0x0800446c
 8003500:	007a1200 	.word	0x007a1200
 8003504:	003d0900 	.word	0x003d0900
 8003508:	aaaaaaab 	.word	0xaaaaaaab

0800350c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e041      	b.n	80035a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d106      	bne.n	8003538 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7fd fc96 	bl	8000e64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2202      	movs	r2, #2
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3304      	adds	r3, #4
 8003548:	4619      	mov	r1, r3
 800354a:	4610      	mov	r0, r2
 800354c:	f000 fc18 	bl	8003d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d001      	beq.n	80035c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e03a      	b.n	800363a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0201 	orr.w	r2, r2, #1
 80035da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a18      	ldr	r2, [pc, #96]	; (8003644 <HAL_TIM_Base_Start_IT+0x98>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d00e      	beq.n	8003604 <HAL_TIM_Base_Start_IT+0x58>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ee:	d009      	beq.n	8003604 <HAL_TIM_Base_Start_IT+0x58>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a14      	ldr	r2, [pc, #80]	; (8003648 <HAL_TIM_Base_Start_IT+0x9c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d004      	beq.n	8003604 <HAL_TIM_Base_Start_IT+0x58>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a13      	ldr	r2, [pc, #76]	; (800364c <HAL_TIM_Base_Start_IT+0xa0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d111      	bne.n	8003628 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b06      	cmp	r3, #6
 8003614:	d010      	beq.n	8003638 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f042 0201 	orr.w	r2, r2, #1
 8003624:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003626:	e007      	b.n	8003638 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0201 	orr.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr
 8003644:	40012c00 	.word	0x40012c00
 8003648:	40000400 	.word	0x40000400
 800364c:	40000800 	.word	0x40000800

08003650 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e041      	b.n	80036e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d106      	bne.n	800367c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f839 	bl	80036ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3304      	adds	r3, #4
 800368c:	4619      	mov	r1, r3
 800368e:	4610      	mov	r0, r2
 8003690:	f000 fb76 	bl	8003d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr

08003700 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d109      	bne.n	8003724 <HAL_TIM_PWM_Start+0x24>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b01      	cmp	r3, #1
 800371a:	bf14      	ite	ne
 800371c:	2301      	movne	r3, #1
 800371e:	2300      	moveq	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	e022      	b.n	800376a <HAL_TIM_PWM_Start+0x6a>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	2b04      	cmp	r3, #4
 8003728:	d109      	bne.n	800373e <HAL_TIM_PWM_Start+0x3e>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b01      	cmp	r3, #1
 8003734:	bf14      	ite	ne
 8003736:	2301      	movne	r3, #1
 8003738:	2300      	moveq	r3, #0
 800373a:	b2db      	uxtb	r3, r3
 800373c:	e015      	b.n	800376a <HAL_TIM_PWM_Start+0x6a>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b08      	cmp	r3, #8
 8003742:	d109      	bne.n	8003758 <HAL_TIM_PWM_Start+0x58>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b01      	cmp	r3, #1
 800374e:	bf14      	ite	ne
 8003750:	2301      	movne	r3, #1
 8003752:	2300      	moveq	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	e008      	b.n	800376a <HAL_TIM_PWM_Start+0x6a>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b01      	cmp	r3, #1
 8003762:	bf14      	ite	ne
 8003764:	2301      	movne	r3, #1
 8003766:	2300      	moveq	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e05e      	b.n	8003830 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d104      	bne.n	8003782 <HAL_TIM_PWM_Start+0x82>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003780:	e013      	b.n	80037aa <HAL_TIM_PWM_Start+0xaa>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2b04      	cmp	r3, #4
 8003786:	d104      	bne.n	8003792 <HAL_TIM_PWM_Start+0x92>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003790:	e00b      	b.n	80037aa <HAL_TIM_PWM_Start+0xaa>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b08      	cmp	r3, #8
 8003796:	d104      	bne.n	80037a2 <HAL_TIM_PWM_Start+0xa2>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037a0:	e003      	b.n	80037aa <HAL_TIM_PWM_Start+0xaa>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2202      	movs	r2, #2
 80037a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2201      	movs	r2, #1
 80037b0:	6839      	ldr	r1, [r7, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 fd70 	bl	8004298 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a1e      	ldr	r2, [pc, #120]	; (8003838 <HAL_TIM_PWM_Start+0x138>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d107      	bne.n	80037d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a18      	ldr	r2, [pc, #96]	; (8003838 <HAL_TIM_PWM_Start+0x138>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d00e      	beq.n	80037fa <HAL_TIM_PWM_Start+0xfa>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e4:	d009      	beq.n	80037fa <HAL_TIM_PWM_Start+0xfa>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a14      	ldr	r2, [pc, #80]	; (800383c <HAL_TIM_PWM_Start+0x13c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d004      	beq.n	80037fa <HAL_TIM_PWM_Start+0xfa>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a12      	ldr	r2, [pc, #72]	; (8003840 <HAL_TIM_PWM_Start+0x140>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d111      	bne.n	800381e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2b06      	cmp	r3, #6
 800380a:	d010      	beq.n	800382e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0201 	orr.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800381c:	e007      	b.n	800382e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f042 0201 	orr.w	r2, r2, #1
 800382c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40012c00 	.word	0x40012c00
 800383c:	40000400 	.word	0x40000400
 8003840:	40000800 	.word	0x40000800

08003844 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d020      	beq.n	80038a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d01b      	beq.n	80038a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f06f 0202 	mvn.w	r2, #2
 8003878:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 fa5a 	bl	8003d48 <HAL_TIM_IC_CaptureCallback>
 8003894:	e005      	b.n	80038a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 fa4d 	bl	8003d36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 fa5c 	bl	8003d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d020      	beq.n	80038f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d01b      	beq.n	80038f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f06f 0204 	mvn.w	r2, #4
 80038c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2202      	movs	r2, #2
 80038ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 fa34 	bl	8003d48 <HAL_TIM_IC_CaptureCallback>
 80038e0:	e005      	b.n	80038ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 fa27 	bl	8003d36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 fa36 	bl	8003d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d020      	beq.n	8003940 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f003 0308 	and.w	r3, r3, #8
 8003904:	2b00      	cmp	r3, #0
 8003906:	d01b      	beq.n	8003940 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f06f 0208 	mvn.w	r2, #8
 8003910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2204      	movs	r2, #4
 8003916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 fa0e 	bl	8003d48 <HAL_TIM_IC_CaptureCallback>
 800392c:	e005      	b.n	800393a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 fa01 	bl	8003d36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 fa10 	bl	8003d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f003 0310 	and.w	r3, r3, #16
 8003946:	2b00      	cmp	r3, #0
 8003948:	d020      	beq.n	800398c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f003 0310 	and.w	r3, r3, #16
 8003950:	2b00      	cmp	r3, #0
 8003952:	d01b      	beq.n	800398c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f06f 0210 	mvn.w	r2, #16
 800395c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2208      	movs	r2, #8
 8003962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f9e8 	bl	8003d48 <HAL_TIM_IC_CaptureCallback>
 8003978:	e005      	b.n	8003986 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f9db 	bl	8003d36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 f9ea 	bl	8003d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00c      	beq.n	80039b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d007      	beq.n	80039b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f06f 0201 	mvn.w	r2, #1
 80039a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7fc fbd6 	bl	800015c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00c      	beq.n	80039d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d007      	beq.n	80039d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 fced 	bl	80043ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00c      	beq.n	80039f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d007      	beq.n	80039f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f9ba 	bl	8003d6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00c      	beq.n	8003a1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f003 0320 	and.w	r3, r3, #32
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d007      	beq.n	8003a1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f06f 0220 	mvn.w	r2, #32
 8003a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 fcc0 	bl	800439c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a1c:	bf00      	nop
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d101      	bne.n	8003a42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a3e:	2302      	movs	r3, #2
 8003a40:	e0ae      	b.n	8003ba0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b0c      	cmp	r3, #12
 8003a4e:	f200 809f 	bhi.w	8003b90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a52:	a201      	add	r2, pc, #4	; (adr r2, 8003a58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a58:	08003a8d 	.word	0x08003a8d
 8003a5c:	08003b91 	.word	0x08003b91
 8003a60:	08003b91 	.word	0x08003b91
 8003a64:	08003b91 	.word	0x08003b91
 8003a68:	08003acd 	.word	0x08003acd
 8003a6c:	08003b91 	.word	0x08003b91
 8003a70:	08003b91 	.word	0x08003b91
 8003a74:	08003b91 	.word	0x08003b91
 8003a78:	08003b0f 	.word	0x08003b0f
 8003a7c:	08003b91 	.word	0x08003b91
 8003a80:	08003b91 	.word	0x08003b91
 8003a84:	08003b91 	.word	0x08003b91
 8003a88:	08003b4f 	.word	0x08003b4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68b9      	ldr	r1, [r7, #8]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 f9e2 	bl	8003e5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699a      	ldr	r2, [r3, #24]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0208 	orr.w	r2, r2, #8
 8003aa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699a      	ldr	r2, [r3, #24]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0204 	bic.w	r2, r2, #4
 8003ab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6999      	ldr	r1, [r3, #24]
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	691a      	ldr	r2, [r3, #16]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	619a      	str	r2, [r3, #24]
      break;
 8003aca:	e064      	b.n	8003b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68b9      	ldr	r1, [r7, #8]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 fa28 	bl	8003f28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699a      	ldr	r2, [r3, #24]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699a      	ldr	r2, [r3, #24]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003af6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6999      	ldr	r1, [r3, #24]
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	021a      	lsls	r2, r3, #8
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	619a      	str	r2, [r3, #24]
      break;
 8003b0c:	e043      	b.n	8003b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68b9      	ldr	r1, [r7, #8]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 fa71 	bl	8003ffc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69da      	ldr	r2, [r3, #28]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f042 0208 	orr.w	r2, r2, #8
 8003b28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69da      	ldr	r2, [r3, #28]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0204 	bic.w	r2, r2, #4
 8003b38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	69d9      	ldr	r1, [r3, #28]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	61da      	str	r2, [r3, #28]
      break;
 8003b4c:	e023      	b.n	8003b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68b9      	ldr	r1, [r7, #8]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 fabb 	bl	80040d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69da      	ldr	r2, [r3, #28]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	69da      	ldr	r2, [r3, #28]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	69d9      	ldr	r1, [r3, #28]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	021a      	lsls	r2, r3, #8
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	61da      	str	r2, [r3, #28]
      break;
 8003b8e:	e002      	b.n	8003b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	75fb      	strb	r3, [r7, #23]
      break;
 8003b94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3718      	adds	r7, #24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d101      	bne.n	8003bc4 <HAL_TIM_ConfigClockSource+0x1c>
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	e0b4      	b.n	8003d2e <HAL_TIM_ConfigClockSource+0x186>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003be2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bfc:	d03e      	beq.n	8003c7c <HAL_TIM_ConfigClockSource+0xd4>
 8003bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c02:	f200 8087 	bhi.w	8003d14 <HAL_TIM_ConfigClockSource+0x16c>
 8003c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c0a:	f000 8086 	beq.w	8003d1a <HAL_TIM_ConfigClockSource+0x172>
 8003c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c12:	d87f      	bhi.n	8003d14 <HAL_TIM_ConfigClockSource+0x16c>
 8003c14:	2b70      	cmp	r3, #112	; 0x70
 8003c16:	d01a      	beq.n	8003c4e <HAL_TIM_ConfigClockSource+0xa6>
 8003c18:	2b70      	cmp	r3, #112	; 0x70
 8003c1a:	d87b      	bhi.n	8003d14 <HAL_TIM_ConfigClockSource+0x16c>
 8003c1c:	2b60      	cmp	r3, #96	; 0x60
 8003c1e:	d050      	beq.n	8003cc2 <HAL_TIM_ConfigClockSource+0x11a>
 8003c20:	2b60      	cmp	r3, #96	; 0x60
 8003c22:	d877      	bhi.n	8003d14 <HAL_TIM_ConfigClockSource+0x16c>
 8003c24:	2b50      	cmp	r3, #80	; 0x50
 8003c26:	d03c      	beq.n	8003ca2 <HAL_TIM_ConfigClockSource+0xfa>
 8003c28:	2b50      	cmp	r3, #80	; 0x50
 8003c2a:	d873      	bhi.n	8003d14 <HAL_TIM_ConfigClockSource+0x16c>
 8003c2c:	2b40      	cmp	r3, #64	; 0x40
 8003c2e:	d058      	beq.n	8003ce2 <HAL_TIM_ConfigClockSource+0x13a>
 8003c30:	2b40      	cmp	r3, #64	; 0x40
 8003c32:	d86f      	bhi.n	8003d14 <HAL_TIM_ConfigClockSource+0x16c>
 8003c34:	2b30      	cmp	r3, #48	; 0x30
 8003c36:	d064      	beq.n	8003d02 <HAL_TIM_ConfigClockSource+0x15a>
 8003c38:	2b30      	cmp	r3, #48	; 0x30
 8003c3a:	d86b      	bhi.n	8003d14 <HAL_TIM_ConfigClockSource+0x16c>
 8003c3c:	2b20      	cmp	r3, #32
 8003c3e:	d060      	beq.n	8003d02 <HAL_TIM_ConfigClockSource+0x15a>
 8003c40:	2b20      	cmp	r3, #32
 8003c42:	d867      	bhi.n	8003d14 <HAL_TIM_ConfigClockSource+0x16c>
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d05c      	beq.n	8003d02 <HAL_TIM_ConfigClockSource+0x15a>
 8003c48:	2b10      	cmp	r3, #16
 8003c4a:	d05a      	beq.n	8003d02 <HAL_TIM_ConfigClockSource+0x15a>
 8003c4c:	e062      	b.n	8003d14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6818      	ldr	r0, [r3, #0]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	6899      	ldr	r1, [r3, #8]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	f000 fafc 	bl	800425a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	609a      	str	r2, [r3, #8]
      break;
 8003c7a:	e04f      	b.n	8003d1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6818      	ldr	r0, [r3, #0]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	6899      	ldr	r1, [r3, #8]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	f000 fae5 	bl	800425a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c9e:	609a      	str	r2, [r3, #8]
      break;
 8003ca0:	e03c      	b.n	8003d1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6818      	ldr	r0, [r3, #0]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	6859      	ldr	r1, [r3, #4]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	f000 fa5c 	bl	800416c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2150      	movs	r1, #80	; 0x50
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fab3 	bl	8004226 <TIM_ITRx_SetConfig>
      break;
 8003cc0:	e02c      	b.n	8003d1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6818      	ldr	r0, [r3, #0]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	6859      	ldr	r1, [r3, #4]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	f000 fa7a 	bl	80041c8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2160      	movs	r1, #96	; 0x60
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 faa3 	bl	8004226 <TIM_ITRx_SetConfig>
      break;
 8003ce0:	e01c      	b.n	8003d1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6818      	ldr	r0, [r3, #0]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	6859      	ldr	r1, [r3, #4]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	f000 fa3c 	bl	800416c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2140      	movs	r1, #64	; 0x40
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fa93 	bl	8004226 <TIM_ITRx_SetConfig>
      break;
 8003d00:	e00c      	b.n	8003d1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	f000 fa8a 	bl	8004226 <TIM_ITRx_SetConfig>
      break;
 8003d12:	e003      	b.n	8003d1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	73fb      	strb	r3, [r7, #15]
      break;
 8003d18:	e000      	b.n	8003d1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc80      	pop	{r7}
 8003d46:	4770      	bx	lr

08003d48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc80      	pop	{r7}
 8003d58:	4770      	bx	lr

08003d5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bc80      	pop	{r7}
 8003d6a:	4770      	bx	lr

08003d6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr
	...

08003d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a2f      	ldr	r2, [pc, #188]	; (8003e50 <TIM_Base_SetConfig+0xd0>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d00b      	beq.n	8003db0 <TIM_Base_SetConfig+0x30>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d9e:	d007      	beq.n	8003db0 <TIM_Base_SetConfig+0x30>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a2c      	ldr	r2, [pc, #176]	; (8003e54 <TIM_Base_SetConfig+0xd4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d003      	beq.n	8003db0 <TIM_Base_SetConfig+0x30>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a2b      	ldr	r2, [pc, #172]	; (8003e58 <TIM_Base_SetConfig+0xd8>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d108      	bne.n	8003dc2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a22      	ldr	r2, [pc, #136]	; (8003e50 <TIM_Base_SetConfig+0xd0>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d00b      	beq.n	8003de2 <TIM_Base_SetConfig+0x62>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd0:	d007      	beq.n	8003de2 <TIM_Base_SetConfig+0x62>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a1f      	ldr	r2, [pc, #124]	; (8003e54 <TIM_Base_SetConfig+0xd4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d003      	beq.n	8003de2 <TIM_Base_SetConfig+0x62>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a1e      	ldr	r2, [pc, #120]	; (8003e58 <TIM_Base_SetConfig+0xd8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d108      	bne.n	8003df4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a0d      	ldr	r2, [pc, #52]	; (8003e50 <TIM_Base_SetConfig+0xd0>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d103      	bne.n	8003e28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d005      	beq.n	8003e46 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	f023 0201 	bic.w	r2, r3, #1
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	611a      	str	r2, [r3, #16]
  }
}
 8003e46:	bf00      	nop
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc80      	pop	{r7}
 8003e4e:	4770      	bx	lr
 8003e50:	40012c00 	.word	0x40012c00
 8003e54:	40000400 	.word	0x40000400
 8003e58:	40000800 	.word	0x40000800

08003e5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	f023 0201 	bic.w	r2, r3, #1
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f023 0303 	bic.w	r3, r3, #3
 8003e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f023 0302 	bic.w	r3, r3, #2
 8003ea4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a1c      	ldr	r2, [pc, #112]	; (8003f24 <TIM_OC1_SetConfig+0xc8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d10c      	bne.n	8003ed2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f023 0308 	bic.w	r3, r3, #8
 8003ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f023 0304 	bic.w	r3, r3, #4
 8003ed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a13      	ldr	r2, [pc, #76]	; (8003f24 <TIM_OC1_SetConfig+0xc8>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d111      	bne.n	8003efe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ee0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	621a      	str	r2, [r3, #32]
}
 8003f18:	bf00      	nop
 8003f1a:	371c      	adds	r7, #28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bc80      	pop	{r7}
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	40012c00 	.word	0x40012c00

08003f28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b087      	sub	sp, #28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	f023 0210 	bic.w	r2, r3, #16
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	021b      	lsls	r3, r3, #8
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f023 0320 	bic.w	r3, r3, #32
 8003f72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a1d      	ldr	r2, [pc, #116]	; (8003ff8 <TIM_OC2_SetConfig+0xd0>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d10d      	bne.n	8003fa4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	011b      	lsls	r3, r3, #4
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fa2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a14      	ldr	r2, [pc, #80]	; (8003ff8 <TIM_OC2_SetConfig+0xd0>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d113      	bne.n	8003fd4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	621a      	str	r2, [r3, #32]
}
 8003fee:	bf00      	nop
 8003ff0:	371c      	adds	r7, #28
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr
 8003ff8:	40012c00 	.word	0x40012c00

08003ffc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f023 0303 	bic.w	r3, r3, #3
 8004032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	4313      	orrs	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004044:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	021b      	lsls	r3, r3, #8
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	4313      	orrs	r3, r2
 8004050:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a1d      	ldr	r2, [pc, #116]	; (80040cc <TIM_OC3_SetConfig+0xd0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d10d      	bne.n	8004076 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004060:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	021b      	lsls	r3, r3, #8
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	4313      	orrs	r3, r2
 800406c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004074:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a14      	ldr	r2, [pc, #80]	; (80040cc <TIM_OC3_SetConfig+0xd0>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d113      	bne.n	80040a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004084:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800408c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	4313      	orrs	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	621a      	str	r2, [r3, #32]
}
 80040c0:	bf00      	nop
 80040c2:	371c      	adds	r7, #28
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bc80      	pop	{r7}
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40012c00 	.word	0x40012c00

080040d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b087      	sub	sp, #28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a1b      	ldr	r3, [r3, #32]
 80040e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004106:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	021b      	lsls	r3, r3, #8
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	4313      	orrs	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800411a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	031b      	lsls	r3, r3, #12
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a0f      	ldr	r2, [pc, #60]	; (8004168 <TIM_OC4_SetConfig+0x98>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d109      	bne.n	8004144 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004136:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	019b      	lsls	r3, r3, #6
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	4313      	orrs	r3, r2
 8004142:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	621a      	str	r2, [r3, #32]
}
 800415e:	bf00      	nop
 8004160:	371c      	adds	r7, #28
 8004162:	46bd      	mov	sp, r7
 8004164:	bc80      	pop	{r7}
 8004166:	4770      	bx	lr
 8004168:	40012c00 	.word	0x40012c00

0800416c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	f023 0201 	bic.w	r2, r3, #1
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4313      	orrs	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f023 030a 	bic.w	r3, r3, #10
 80041a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	621a      	str	r2, [r3, #32]
}
 80041be:	bf00      	nop
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr

080041c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	f023 0210 	bic.w	r2, r3, #16
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	031b      	lsls	r3, r3, #12
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004204:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	4313      	orrs	r3, r2
 800420e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	621a      	str	r2, [r3, #32]
}
 800421c:	bf00      	nop
 800421e:	371c      	adds	r7, #28
 8004220:	46bd      	mov	sp, r7
 8004222:	bc80      	pop	{r7}
 8004224:	4770      	bx	lr

08004226 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004226:	b480      	push	{r7}
 8004228:	b085      	sub	sp, #20
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4313      	orrs	r3, r2
 8004244:	f043 0307 	orr.w	r3, r3, #7
 8004248:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	609a      	str	r2, [r3, #8]
}
 8004250:	bf00      	nop
 8004252:	3714      	adds	r7, #20
 8004254:	46bd      	mov	sp, r7
 8004256:	bc80      	pop	{r7}
 8004258:	4770      	bx	lr

0800425a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800425a:	b480      	push	{r7}
 800425c:	b087      	sub	sp, #28
 800425e:	af00      	add	r7, sp, #0
 8004260:	60f8      	str	r0, [r7, #12]
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	607a      	str	r2, [r7, #4]
 8004266:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004274:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	021a      	lsls	r2, r3, #8
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	431a      	orrs	r2, r3
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	4313      	orrs	r3, r2
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	4313      	orrs	r3, r2
 8004286:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	609a      	str	r2, [r3, #8]
}
 800428e:	bf00      	nop
 8004290:	371c      	adds	r7, #28
 8004292:	46bd      	mov	sp, r7
 8004294:	bc80      	pop	{r7}
 8004296:	4770      	bx	lr

08004298 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f003 031f 	and.w	r3, r3, #31
 80042aa:	2201      	movs	r2, #1
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a1a      	ldr	r2, [r3, #32]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	43db      	mvns	r3, r3
 80042ba:	401a      	ands	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a1a      	ldr	r2, [r3, #32]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f003 031f 	and.w	r3, r3, #31
 80042ca:	6879      	ldr	r1, [r7, #4]
 80042cc:	fa01 f303 	lsl.w	r3, r1, r3
 80042d0:	431a      	orrs	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	621a      	str	r2, [r3, #32]
}
 80042d6:	bf00      	nop
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	bc80      	pop	{r7}
 80042de:	4770      	bx	lr

080042e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e046      	b.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	4313      	orrs	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a16      	ldr	r2, [pc, #88]	; (8004390 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d00e      	beq.n	800435a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004344:	d009      	beq.n	800435a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a12      	ldr	r2, [pc, #72]	; (8004394 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d004      	beq.n	800435a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a10      	ldr	r2, [pc, #64]	; (8004398 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d10c      	bne.n	8004374 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004360:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	4313      	orrs	r3, r2
 800436a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	bc80      	pop	{r7}
 800438e:	4770      	bx	lr
 8004390:	40012c00 	.word	0x40012c00
 8004394:	40000400 	.word	0x40000400
 8004398:	40000800 	.word	0x40000800

0800439c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bc80      	pop	{r7}
 80043ac:	4770      	bx	lr

080043ae <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr

080043c0 <__libc_init_array>:
 80043c0:	b570      	push	{r4, r5, r6, lr}
 80043c2:	2600      	movs	r6, #0
 80043c4:	4d0c      	ldr	r5, [pc, #48]	; (80043f8 <__libc_init_array+0x38>)
 80043c6:	4c0d      	ldr	r4, [pc, #52]	; (80043fc <__libc_init_array+0x3c>)
 80043c8:	1b64      	subs	r4, r4, r5
 80043ca:	10a4      	asrs	r4, r4, #2
 80043cc:	42a6      	cmp	r6, r4
 80043ce:	d109      	bne.n	80043e4 <__libc_init_array+0x24>
 80043d0:	f000 f822 	bl	8004418 <_init>
 80043d4:	2600      	movs	r6, #0
 80043d6:	4d0a      	ldr	r5, [pc, #40]	; (8004400 <__libc_init_array+0x40>)
 80043d8:	4c0a      	ldr	r4, [pc, #40]	; (8004404 <__libc_init_array+0x44>)
 80043da:	1b64      	subs	r4, r4, r5
 80043dc:	10a4      	asrs	r4, r4, #2
 80043de:	42a6      	cmp	r6, r4
 80043e0:	d105      	bne.n	80043ee <__libc_init_array+0x2e>
 80043e2:	bd70      	pop	{r4, r5, r6, pc}
 80043e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043e8:	4798      	blx	r3
 80043ea:	3601      	adds	r6, #1
 80043ec:	e7ee      	b.n	80043cc <__libc_init_array+0xc>
 80043ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80043f2:	4798      	blx	r3
 80043f4:	3601      	adds	r6, #1
 80043f6:	e7f2      	b.n	80043de <__libc_init_array+0x1e>
 80043f8:	08004470 	.word	0x08004470
 80043fc:	08004470 	.word	0x08004470
 8004400:	08004470 	.word	0x08004470
 8004404:	08004474 	.word	0x08004474

08004408 <memset>:
 8004408:	4603      	mov	r3, r0
 800440a:	4402      	add	r2, r0
 800440c:	4293      	cmp	r3, r2
 800440e:	d100      	bne.n	8004412 <memset+0xa>
 8004410:	4770      	bx	lr
 8004412:	f803 1b01 	strb.w	r1, [r3], #1
 8004416:	e7f9      	b.n	800440c <memset+0x4>

08004418 <_init>:
 8004418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441a:	bf00      	nop
 800441c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800441e:	bc08      	pop	{r3}
 8004420:	469e      	mov	lr, r3
 8004422:	4770      	bx	lr

08004424 <_fini>:
 8004424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004426:	bf00      	nop
 8004428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800442a:	bc08      	pop	{r3}
 800442c:	469e      	mov	lr, r3
 800442e:	4770      	bx	lr
